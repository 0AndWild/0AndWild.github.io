[{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/","section":"0AndWild_log","summary":"","title":"0AndWild_log","type":"page"},{"content":" What is Giscus? # Giscus is an open-source comment system that uses GitHub Discussions as its backend.\nKey Features # ‚úÖ Completely Free (leverages GitHub features) ‚úÖ No Server Required (GitHub handles everything) ‚úÖ Full Markdown Support (code blocks, images, tables, etc.) ‚úÖ Reactions (üëç, ‚ù§Ô∏è, üòÑ, etc.) ‚úÖ GitHub Notifications (get notified when comments are posted) ‚úÖ Dark Mode (auto-syncs with blog theme) ‚úÖ Data Ownership (stored in your repository) Differences from Utterances # Feature Giscus Utterances Backend GitHub Discussions GitHub Issues Reactions ‚úÖ ‚ùå Nested Replies ‚úÖ (nested) ‚ö†Ô∏è (flat) Comment Sorting ‚úÖ ‚ö†Ô∏è Best For Comments Issue tracking Conclusion: Giscus is the superior choice over Utterances.\nPrerequisites # Requirements # GitHub account Public GitHub repository (your blog repository) Hugo + Blowfish theme Limitations # ‚ö†Ô∏è Public repositories only (Private repositories have limited Discussions functionality) ‚ö†Ô∏è GitHub account required (no anonymous comments) Step 1: Enable GitHub Discussions # 1.1 Navigate to Repository Settings # Go to your blog repository on GitHub\nExample: https://github.com/0AndWild/0AndWild.github.io Click the Settings tab\n1.2 Enable Discussions # Scroll down to find the Features section\nCheck the Discussions checkbox ‚úÖ\nIt will save automatically\n1.3 Verify # Confirm that the Discussions tab appears at the top of your repository\nCode | Issues | Pull requests | Discussions | ‚Üê Newly created! Step 2: Install Giscus App # 2.1 Install Giscus GitHub App # Visit https://github.com/apps/giscus\nClick the Install button\nChoose permission scope:\nAll repositories (all repositories) Only select repositories (specific repositories - recommended) Select your blog repository:\n0AndWild/0AndWild.github.io Click Install\n2.2 Verify Permissions # Giscus requests the following permissions:\n‚úÖ Read access to discussions (read discussions) ‚úÖ Write access to discussions (write discussions) ‚úÖ Read access to metadata (read metadata) Step 3: Generate Giscus Configuration # 3.1 Visit Giscus Website # Go to https://giscus.app\n3.2 Connect Repository # Enter in the Repository section:\n0AndWild/0AndWild.github.io You should see a success message below:\n‚úÖ Success! This repository meets all criteria. If you see an error:\nVerify Discussions is enabled Verify Giscus App is installed Verify the repository is Public 3.3 Page ‚ÜîÔ∏è Discussion Mapping # Choose in the Discussion Mapping section:\nRecommended: pathname (path name) # Mapping: Select pathname Each blog post\u0026rsquo;s path becomes the Discussion title.\nExample:\nPost: /posts/giscus-guide/ Discussion title: posts/giscus-guide Alternatives: # URL: Uses full URL (problematic if domain changes) title: Uses post title (problematic if title changes) og:title: OpenGraph title specific term: Manually specified Recommendation: Use pathname\n3.4 Select Discussion Category # Choose from the Discussion Category dropdown:\nRecommended: Announcements # Category: Select Announcements Characteristics:\nOnly admins can create new Discussions Anyone can comment Ideal for blog posts Alternative: General # Anyone can create Discussions More open Recommendation: Announcements (best for blogs)\n3.5 Feature Selection # Enable Reactions # ‚úÖ Enable reactions Users can react with üëç, ‚ù§Ô∏è, üòÑ, etc.\nEmit Metadata # ‚ñ° Emit metadata (recommended to leave unchecked) Unnecessary feature, better to keep it off\nComment Input Position # ‚ö™ Above comments ‚ö™ Below comments (recommended) Recommendation: Below comments\nEncourages users to read existing comments first Lazy Loading # ‚úÖ Lazy loading Improves page load speed (recommended)\n3.6 Theme Selection # Recommended: preferred_color_scheme # Theme: preferred_color_scheme Behavior:\nAutomatically switches based on user\u0026rsquo;s system settings Dark mode ‚ÜîÔ∏è Light mode automatic Alternatives: # light: Always light theme dark: Always dark theme transparent_dark: Transparent dark Other GitHub themes Recommendation: preferred_color_scheme (auto-switching)\n3.7 Language Setting # Language: en (English) Step 4: Copy Generated Code # 4.1 Copy Script # Copy the generated code from the Enable giscus section at the bottom of the page:\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;0AndWild/0AndWild.github.io\u0026#34; data-repo-id=\u0026#34;R_kgDOxxxxxxxx\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDOxxxxxxxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 4.2 Important Values # data-repo-id: Repository unique ID (auto-generated) data-category-id: Category unique ID (auto-generated) These values are unique to your repository, so you must use the code generated from the Giscus website.\nStep 5: Integrate with Blowfish Theme # 5.1 Create Directory # From the terminal, navigate to your blog\u0026rsquo;s root directory:\nmkdir -p layouts/partials 5.2 Create comments.html File # touch layouts/partials/comments.html Or create directly in your IDE/editor:\nlayouts/ ‚îî‚îÄ‚îÄ partials/ ‚îî‚îÄ‚îÄ comments.html ‚Üê Create new 5.3 Insert Giscus Code # Add the following content to layouts/partials/comments.html:\n\u0026lt;!-- Giscus Comment System --\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;0AndWild/0AndWild.github.io\u0026#34; data-repo-id=\u0026#34;R_kgDOxxxxxxxx\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDOxxxxxxxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; ‚ö†Ô∏è Important: Replace the data-repo-id and data-category-id values with your own values!\n5.4 Configure params.toml # Open config/_default/params.toml and add to the [article] section:\n[article] showComments = true # Add or verify this line # ... other settings If the showComments entry already exists, make sure it\u0026rsquo;s set to true.\nStep 6: Local Testing # 6.1 Run Hugo Server # hugo server -D 6.2 Verify in Browser # http://localhost:1313 The Giscus comment widget should appear at the bottom of post pages.\n6.3 Write Test Comment # Click Sign in with GitHub button Authorize GitHub OAuth Write a test comment Verify the comment displays 6.4 Check GitHub Discussions # GitHub repository ‚Üí Discussions tab Verify a new Discussion was created in the Announcements category Verify the Discussion title matches the post path Step 7: Deploy # 7.1 Commit to Git # git add layouts/partials/comments.html git add config/_default/params.toml git commit -m \u0026#34;Add Giscus comments system\u0026#34; 7.2 Push to GitHub # git push origin main 7.3 Check GitHub Actions # GitHub Actions will automatically build and deploy.\nCheck deployment status:\nGitHub repository ‚Üí Actions tab 7.4 Verify Deployed Site # https://0andwild.github.io Verify the comment widget displays correctly on post pages.\nAdvanced Configuration # Dynamic Dark Mode and Language Setting (Recommended) # A complete solution to make Giscus automatically adapt to Blowfish theme\u0026rsquo;s dark mode toggle and language switching.\nComplete Dynamic Configuration # Full code for layouts/partials/comments.html:\n\u0026lt;!-- Giscus Comments with Dynamic Theme and Language --\u0026gt; {{ $lang := .Site.Language.Lang }} {{ $translationKey := .File.TranslationBaseName }} \u0026lt;script\u0026gt; (function() { // Get current theme (dark/light) function getGiscusTheme() { const isDark = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); return isDark ? \u0026#39;dark_tritanopia\u0026#39; : \u0026#39;light_tritanopia\u0026#39;; } // Get language from Hugo template const currentLang = \u0026#39;{{ $lang }}\u0026#39;; // Use file directory path for unified comments across languages // Example: \u0026#34;posts/subscription_alert\u0026#34; for both index.ko.md and index.en.md const discussionId = \u0026#39;{{ .File.Dir | replaceRE \u0026#34;^content/\u0026#34; \u0026#34;\u0026#34; | replaceRE \u0026#34;/$\u0026#34; \u0026#34;\u0026#34; }}\u0026#39;; // Wait for DOM to be ready if (document.readyState === \u0026#39;loading\u0026#39;) { document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initGiscus); } else { initGiscus(); } function initGiscus() { // Create and insert Giscus script with dynamic settings const script = document.createElement(\u0026#39;script\u0026#39;); script.src = \u0026#39;https://giscus.app/client.js\u0026#39;; script.setAttribute(\u0026#39;data-repo\u0026#39;, \u0026#39;0AndWild/0AndWild.github.io\u0026#39;); script.setAttribute(\u0026#39;data-repo-id\u0026#39;, \u0026#39;R_kgDOQAqZFA\u0026#39;); script.setAttribute(\u0026#39;data-category\u0026#39;, \u0026#39;General\u0026#39;); script.setAttribute(\u0026#39;data-category-id\u0026#39;, \u0026#39;DIC_kwDOQAqZFM4CwwRg\u0026#39;); script.setAttribute(\u0026#39;data-mapping\u0026#39;, \u0026#39;specific\u0026#39;); script.setAttribute(\u0026#39;data-term\u0026#39;, discussionId); script.setAttribute(\u0026#39;data-strict\u0026#39;, \u0026#39;0\u0026#39;); script.setAttribute(\u0026#39;data-reactions-enabled\u0026#39;, \u0026#39;1\u0026#39;); script.setAttribute(\u0026#39;data-emit-metadata\u0026#39;, \u0026#39;0\u0026#39;); script.setAttribute(\u0026#39;data-input-position\u0026#39;, \u0026#39;bottom\u0026#39;); script.setAttribute(\u0026#39;data-theme\u0026#39;, getGiscusTheme()); script.setAttribute(\u0026#39;data-lang\u0026#39;, currentLang); script.setAttribute(\u0026#39;data-loading\u0026#39;, \u0026#39;lazy\u0026#39;); script.setAttribute(\u0026#39;crossorigin\u0026#39;, \u0026#39;anonymous\u0026#39;); script.async = true; // Find giscus container or create one const container = document.querySelector(\u0026#39;.giscus-container\u0026#39;) || document.currentScript?.parentElement; if (container) { container.appendChild(script); } } // Monitor theme changes and update Giscus function updateGiscusTheme() { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (!iframe) return; const theme = getGiscusTheme(); try { iframe.contentWindow.postMessage( { giscus: { setConfig: { theme: theme } } }, \u0026#39;https://giscus.app\u0026#39; ); } catch (error) { console.log(\u0026#39;Giscus theme update delayed, will retry...\u0026#39;); } } // Watch for theme changes using MutationObserver const observer = new MutationObserver((mutations) =\u0026gt; { mutations.forEach((mutation) =\u0026gt; { if (mutation.attributeName === \u0026#39;class\u0026#39;) { // Delay update to ensure iframe is ready setTimeout(updateGiscusTheme, 100); } }); }); // Start observing after a short delay setTimeout(() =\u0026gt; { observer.observe(document.documentElement, { attributes: true, attributeFilter: [\u0026#39;class\u0026#39;] }); }, 500); // Update theme when Giscus iframe loads window.addEventListener(\u0026#39;message\u0026#39;, (event) =\u0026gt; { if (event.origin !== \u0026#39;https://giscus.app\u0026#39;) return; if (event.data.giscus) { // Giscus is ready, update theme setTimeout(updateGiscusTheme, 200); } }); })(); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* Ensure Giscus iframe has proper height and displays all content */ .giscus-container { min-height: 300px; } .giscus-container iframe.giscus-frame { width: 100%; border: none; min-height: 300px; } /* Make sure comment actions are visible */ .giscus { overflow: visible !important; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;giscus-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; How It Works # 1. Dynamic Language Setting # {{ $lang := .Site.Language.Lang }} const currentLang = \u0026#39;{{ $lang }}\u0026#39;; Gets current page language from Hugo template Korean page: ko, English page: en Sets Giscus to the corresponding language Result:\nKorean page ‚Üí Giscus UI displays in Korean English page ‚Üí Giscus UI displays in English Language switch triggers page reload with automatic update 2. Dynamic Dark Mode Setting # function getGiscusTheme() { const isDark = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); return isDark ? \u0026#39;dark_tritanopia\u0026#39; : \u0026#39;light_tritanopia\u0026#39;; } Blowfish theme adds \u0026lt;html class=\u0026quot;dark\u0026quot;\u0026gt; in dark mode Detects this to determine theme Uses dark_tritanopia / light_tritanopia themes (colorblind-friendly) Result:\nPage load: Loads Giscus with current theme state Dark mode toggle click: Real-time Giscus theme change 3. Unified Comments Across Languages # const discussionId = \u0026#39;{{ .File.Dir | replaceRE \u0026#34;^content/\u0026#34; \u0026#34;\u0026#34; | replaceRE \u0026#34;/$\u0026#34; \u0026#34;\u0026#34; }}\u0026#39;; Uses file directory path as Discussion ID content/posts/subscription_alert/index.ko.md ‚Üí posts/subscription_alert content/posts/subscription_alert/index.en.md ‚Üí posts/subscription_alert Same ID means Korean/English versions share the same comments Result:\nComments written on Korean post Also display on English post Separate Discussions created per post 4. Real-time Theme Change Detection # const observer = new MutationObserver((mutations) =\u0026gt; { mutations.forEach((mutation) =\u0026gt; { if (mutation.attributeName === \u0026#39;class\u0026#39;) { setTimeout(updateGiscusTheme, 100); } }); }); MutationObserver detects HTML class changes Immediately detects dark mode toggle clicks Sends theme change command to Giscus iframe via postMessage Testing Method # # 1. Run local server hugo server -D # 2. Verify in browser http://localhost:1313/posts/subscription_alert/ Test Items:\n‚úÖ Page load displays Giscus with current theme (light/dark) ‚úÖ Dark mode toggle click immediately changes Giscus theme ‚úÖ Language switch (ko ‚Üí en) changes Giscus language ‚úÖ Korean/English pages display same comments Changing Theme Options # To use different themes, modify the getGiscusTheme() function:\n// Basic theme function getGiscusTheme() { const isDark = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); return isDark ? \u0026#39;dark\u0026#39; : \u0026#39;light\u0026#39;; } // High contrast theme function getGiscusTheme() { const isDark = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); return isDark ? \u0026#39;dark_high_contrast\u0026#39; : \u0026#39;light_high_contrast\u0026#39;; } // GitHub style theme function getGiscusTheme() { const isDark = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); return isDark ? \u0026#39;dark_dimmed\u0026#39; : \u0026#39;light\u0026#39;; } Available themes:\nlight / dark light_high_contrast / dark_high_contrast light_tritanopia / dark_tritanopia (colorblind-friendly) dark_dimmed transparent_dark preferred_color_scheme (follows system settings) Static Theme Configuration (Simple Method) # If dynamic changes aren\u0026rsquo;t needed, you can configure statically:\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;0AndWild/0AndWild.github.io\u0026#34; data-repo-id=\u0026#34;R_kgDOxxxxxxxx\u0026#34; data-category=\u0026#34;General\u0026#34; data-category-id=\u0026#34;DIC_kwDOxxxxxxxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Pros: Simple Cons: No real-time theme changes, comments separated by language\nHide Comments on Specific Posts # To hide comments on specific posts only, add to that post\u0026rsquo;s front matter:\n--- title: \u0026#34;Post Without Comments\u0026#34; showComments: false # Hide comments on this post only --- Separate Comments by Category # To use different Discussion categories for posts in different categories:\n\u0026lt;!-- Conditional category configuration --\u0026gt; \u0026lt;script\u0026gt; const category = {{ if in .Params.categories \u0026#34;Tutorial\u0026#34; }} \u0026#34;DIC_kwDOxxxxTutorial\u0026#34; {{ else }} \u0026#34;DIC_kwDOxxxxGeneral\u0026#34; {{ end }}; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; ... data-category-id=\u0026#34;{{ category }}\u0026#34; ...\u0026gt; \u0026lt;/script\u0026gt; Troubleshooting # Comment Widget Not Displaying # Cause 1: Discussions Not Enabled # Solution: GitHub repository ‚Üí Settings ‚Üí Check Discussions Cause 2: Giscus App Not Installed # Solution: Install at https://github.com/apps/giscus Cause 3: Repository ID Error # Solution: Regenerate code at giscus.app Cause 4: showComments Setting Missing # # config/_default/params.toml [article] showComments = true # Verify Only Login Button Shows, Can\u0026rsquo;t Comment # Cause: GitHub OAuth Authorization Needed # 1. Click \u0026#34;Sign in with GitHub\u0026#34; 2. Authorize OAuth permissions 3. Redirect to repository 4. Can write comments Comments Not Saving # Cause: Repository Permission Issue # Check: 1. Is the repository Public? 2. Is the repository included in Giscus App permissions? 3. Does the Discussion category exist? Dark Mode Not Syncing # Solution: Add JavaScript Sync Code # Refer to \u0026ldquo;Advanced Configuration \u0026gt; Automatic Dark Mode Switching\u0026rdquo; above\nManaging Giscus # Comment Management # Manage via GitHub Discussions # 1. GitHub repository ‚Üí Discussions tab 2. Click the relevant Discussion 3. Management actions: - Edit comment (own comments only) - Delete comment (admin) - Block user (admin) - Lock Discussion (admin) Handling Spam Comments # 1. Find spam comment in GitHub Discussions 2. ... menu next to comment ‚Üí \u0026#34;Delete\u0026#34; 3. Block user: Profile ‚Üí Block user Notification Settings # Receive Comment Notifications via GitHub # 1. GitHub ‚Üí Settings ‚Üí Notifications 2. Add repository to Watching 3. Configure email notifications Receive Notifications for Specific Discussions Only # 1. Discussions tab ‚Üí Relevant Discussion 2. \u0026#34;Subscribe\u0026#34; button on right 3. Select \u0026#34;Notify me\u0026#34; Statistics and Analytics # View Comment Statistics # In GitHub Discussions:\n1. Discussions tab 2. Check number of Discussions by category 3. Check comment count for each Discussion Utilize GitHub Insights # GitHub repository ‚Üí Insights ‚Üí Community ‚Üí Check Discussions activity Cost and Limitations # Cost # Completely Free\nOnly need a GitHub account Unlimited comments within repository size limits Limitations # GitHub API Rate Limit # 60 requests/hour (unauthenticated) 5,000 requests/hour (authenticated) Giscus is optimized with caching, so no issues Repository Size # GitHub Free: 1GB per repository Text comments alone won\u0026rsquo;t reach the limit Discussions Limit # None (unlimited) Alternative Comparisons # Giscus vs Utterances # Item Giscus Utterances Backend Discussions Issues Reactions ‚úÖ ‚ùå Nested Replies Nested support Flat Recommendation ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê Conclusion: Giscus is recommended\nGiscus vs Disqus # Item Giscus Disqus Cost Free Free (with ads) Ads ‚ùå ‚úÖ Anonymous Comments ‚ùå ‚úÖ (Guest) Markdown ‚úÖ ‚ö†Ô∏è Data Ownership ‚úÖ ‚ùå Recommendation Developer blogs General blogs Migration Guide # Utterances ‚Üí Giscus # 1. Convert GitHub Issues to Discussions - Manual work required (no automation) - Or leave Issues as-is and start fresh with Giscus 2. Replace comments.html file - Delete Utterances code - Add Giscus code 3. Deploy Disqus ‚Üí Giscus # 1. Export Disqus data (XML) 2. Manual migration to GitHub Discussions - No automation tools available - Need to write custom script - Or starting fresh recommended Additional Resources # Official Documentation # Giscus Official Site Giscus GitHub Community # Giscus Discussions Blowfish Documentation Checklist # Installation completion checklist:\nGitHub Discussions enabled Giscus App installed Created layouts/partials/comments.html Inserted Giscus code (with your own IDs) Set showComments = true in params.toml Local testing complete Pushed to GitHub Verified on deployed site Wrote test comment Verified creation in GitHub Discussions Conclusion # Giscus is the most suitable comment system for Hugo/GitHub Pages blogs:\nSummary of Advantages # ‚úÖ Completely free ‚úÖ Simple setup (10 minutes) ‚úÖ No server required ‚úÖ Full Markdown support ‚úÖ GitHub integration ‚úÖ Data ownership\nDisadvantages # ‚ùå GitHub account required (no anonymous comments) ‚ùå Best for technical blogs (barrier for general users)\nRecommended For # ‚úÖ Developer blogs ‚úÖ Technical documentation ‚úÖ Open source projects ","date":"2025-10-17","externalUrl":null,"permalink":"/en/posts/comments_giscus/","section":"Posts","summary":"How to add a free, Markdown-supporting comment system in 10 minutes","title":"Adding Comments to Hugo Blog with Giscus","type":"posts"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/comments/","section":"Tags","summary":"","title":"Comments","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/giscus/","section":"Tags","summary":"","title":"Giscus","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/github/","section":"Tags","summary":"","title":"GitHub","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/categories/tutorial/","section":"Categories","summary":"","title":"Tutorial","type":"categories"},{"content":" Overview # This guide provides a comprehensive comparison of all methods to add comment functionality to blogs built with static site generators (Hugo). We present solutions for various requirements including anonymous comments, GitHub login, and social logins.\nComment System Classification # By Authentication Method # Authentication Systems GitHub Only Giscus, Utterances Anonymous Supported Remark42, Commento, Comentario, HashOver Anonymous + Social Login Remark42, Commento, Disqus Social Login Only Disqus, Hyvor Talk By Hosting Method # Hosting Systems SaaS (No Management) Giscus, Utterances, Disqus, Hyvor Talk Self-Hosted Remark42, Commento, Comentario, HashOver Hybrid Cusdis (Free Vercel deployment) 1. Giscus (Highly Recommended - For GitHub Users) # Concept # Comment system using GitHub Discussions as backend\nHow It Works # 1. User visits blog ‚Üì 2. Giscus widget loads ‚Üì 3. Login with GitHub OAuth ‚Üì 4. Write comment ‚Üì 5. Auto-saved to GitHub Discussions ‚Üì 6. Displayed on blog in real-time Advantages # ‚úÖ Completely free (leverages GitHub features) ‚úÖ No server required (GitHub handles backend) ‚úÖ Data ownership (stored in your repository) ‚úÖ Markdown support (code blocks, images, etc.) ‚úÖ Reactions support (üëç, ‚ù§Ô∏è, etc.) ‚úÖ Notifications (comment alerts via GitHub notifications) ‚úÖ Dark mode (syncs with blog theme) ‚úÖ Spam prevention (requires GitHub account) ‚úÖ Easy management (manage in GitHub Discussions) ‚úÖ Searchable (search comments via GitHub search) Disadvantages # ‚ùå No anonymous comments (GitHub account required) ‚ùå Best for tech blogs (general users may not have GitHub accounts) ‚ùå GitHub dependency (comments unavailable during GitHub outages) Implementation Difficulty # ‚≠ê‚≠ê (2/5)\nSetup Method # Step 1: Enable GitHub Discussions # 1. GitHub Repository ‚Üí Settings 2. Features section ‚Üí Check Discussions Step 2: Configure Giscus # Visit giscus.app Enter repository: username/repository Select settings: Page ‚ÜîÔ∏è Discussion mapping: pathname (recommended) Discussion category: Announcements or General Features: Reactions, comments above Theme: Match your blog theme Step 3: Add to Blowfish # \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;0AndWild/0AndWild.github.io\u0026#34; data-repo-id=\u0026#34;YOUR_REPO_ID\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;YOUR_CATEGORY_ID\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Step 4: Configure params.toml # [article] showComments = true Theme Synchronization (Dark Mode) # \u0026lt;script\u0026gt; // Change Giscus theme when blog theme changes const giscusTheme = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (giscusTheme) { const theme = document.documentElement.getAttribute(\u0026#39;data-theme\u0026#39;); giscusTheme.contentWindow.postMessage({ giscus: { setConfig: { theme: theme === \u0026#39;dark\u0026#39; ? \u0026#39;dark\u0026#39; : \u0026#39;light\u0026#39; } } }, \u0026#39;https://giscus.app\u0026#39;); } \u0026lt;/script\u0026gt; Cost # Completely free\nRecommended For # ‚úÖ Developer blogs ‚úÖ Technical documentation ‚úÖ Open source project blogs 2. Utterances # Concept # Comment system using GitHub Issues as backend (predecessor of Giscus)\nHow It Works # 1. GitHub OAuth login ‚Üì 2. Write comment ‚Üì 3. Save to GitHub Issues (each post = 1 Issue) ‚Üì 4. Display on blog Advantages # ‚úÖ Completely free ‚úÖ Lightweight (TypeScript) ‚úÖ Simple setup ‚úÖ Markdown support Disadvantages # ‚ùå Uses Issues (less suitable than Discussions) ‚ùå Fewer features than Giscus ‚ùå No anonymous comments Giscus vs Utterances # Feature Giscus Utterances Backend Discussions Issues Reactions ‚úÖ ‚ùå Nested Replies ‚úÖ (nested) ‚ö†Ô∏è (flat) Suitability Comment-specific Issue tracking Conclusion: Giscus is a superior alternative to Utterances\nImplementation Difficulty # ‚≠ê‚≠ê (2/5)\nSetup Method # \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;username/repository\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Recommended For # Unless there\u0026rsquo;s a specific reason, use Giscus instead 3. Remark42 (Highly Recommended - Anonymous + Social Login) # Concept # Open-source self-hosted comment system supporting anonymous and various social logins\nHow It Works # 1. Deploy Remark42 server (Docker) ‚Üì 2. Insert Remark42 script on blog ‚Üì 3. User chooses: - Write anonymous comment - Login with GitHub/Google/Twitter and write ‚Üì 4. Save to Remark42 DB ‚Üì 5. Display on blog Advantages # ‚úÖ Anonymous comments supported (can be toggled on/off) ‚úÖ Various social logins (GitHub, Google, Facebook, Twitter, Email) ‚úÖ Completely free (open source) ‚úÖ No ads ‚úÖ Data ownership (your server) ‚úÖ Markdown support ‚úÖ Comment edit/delete ‚úÖ Admin mode (approve/block/delete comments) ‚úÖ Notifications (Email/Telegram) ‚úÖ Import/Export (migrate from other systems) ‚úÖ Voting (upvote/downvote) ‚úÖ Spam filter Disadvantages # ‚ùå Self-hosting required (Docker server) ‚ùå Maintenance responsibility ‚ùå Hosting costs ($5/month~, free tier possible) Implementation Difficulty # ‚≠ê‚≠ê‚≠ê‚≠ê (4/5)\nHosting Options # Option 1: Railway (Recommended) # 1. Sign up for Railway.app 2. \u0026#34;New Project\u0026#34; ‚Üí \u0026#34;Deploy from GitHub\u0026#34; 3. Select Remark42 Docker image 4. Configure environment variables: - REMARK_URL=https://your-remark42.railway.app - SECRET=your-random-secret - AUTH_ANON=true # Allow anonymous comments - AUTH_GITHUB_CID=your_client_id - AUTH_GITHUB_CSEC=your_client_secret Railway Free Tier:\n$5 credit per month Sufficient for small blogs Option 2: Fly.io # # fly.toml app = \u0026#34;my-remark42\u0026#34; [build] image = \u0026#34;umputun/remark42:latest\u0026#34; [env] REMARK_URL = \u0026#34;https://my-remark42.fly.dev\u0026#34; AUTH_ANON = \u0026#34;true\u0026#34; AUTH_GITHUB_CID = \u0026#34;xxx\u0026#34; AUTH_GITHUB_CSEC = \u0026#34;xxx\u0026#34; fly launch fly deploy Fly.io Free Tier:\n3 apps Sufficient for small blogs Option 3: Docker Compose (VPS) # # docker-compose.yml version: \u0026#39;3.8\u0026#39; services: remark42: image: umputun/remark42:latest restart: always environment: - REMARK_URL=https://remark.your-blog.com - SECRET=your-secret-key-change-this - AUTH_ANON=true # Allow anonymous - AUTH_GITHUB_CID=xxx # GitHub login - AUTH_GITHUB_CSEC=xxx - AUTH_GOOGLE_CID=xxx # Google login - AUTH_GOOGLE_CSEC=xxx - ADMIN_SHARED_ID=github_username # Admin volumes: - ./data:/srv/var ports: - \u0026#34;8080:8080\u0026#34; docker-compose up -d Blog Embed Code # \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;div id=\u0026#34;remark42\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var remark_config = { host: \u0026#39;https://your-remark42.railway.app\u0026#39;, site_id: \u0026#39;0andwild-blog\u0026#39;, components: [\u0026#39;embed\u0026#39;], theme: \u0026#39;light\u0026#39;, locale: \u0026#39;en\u0026#39;, max_shown_comments: 10, simple_view: false, no_footer: false }; (function(c) { for(var i = 0; i \u0026lt; c.length; i++){ var d = document, s = d.createElement(\u0026#39;script\u0026#39;); s.src = remark_config.host + \u0026#39;/web/\u0026#39; +c[i] +\u0026#39;.js\u0026#39;; s.defer = true; (d.head || d.body).appendChild(s); } })(remark_config.components || [\u0026#39;embed\u0026#39;]); \u0026lt;/script\u0026gt; Anonymous + GitHub Simultaneous Configuration # # Environment variables AUTH_ANON=true # Allow anonymous AUTH_GITHUB_CID=xxx # GitHub OAuth App ID AUTH_GITHUB_CSEC=xxx # GitHub OAuth App Secret ANON_VOTE=false # Disable voting for anonymous (spam prevention) Users can choose:\n\u0026ldquo;Comment anonymously\u0026rdquo; \u0026ldquo;Login with GitHub\u0026rdquo; Admin Features # # Designate admin ADMIN_SHARED_ID=github_yourusername # Or by email ADMIN_SHARED_EMAIL=you@example.com Admin capabilities:\nDelete comments Block users Pin comments Read-only mode Cost # Railway: Free or $5/month Fly.io: Free tier available VPS (DigitalOcean, etc.): $5/month~ Recommended For # ‚úÖ Want both anonymous and social login ‚úÖ Users comfortable with Docker ‚úÖ Want complete data control 4. Commento / Comentario # Concept # Privacy-focused lightweight comment system\nCommento vs Comentario # Item Commento Comentario Status Development stopped Actively developed (Commento fork) License MIT MIT Language Go Go Recommend ‚ùå ‚úÖ Conclusion: Comentario recommended\nComentario Advantages # ‚úÖ Anonymous comments supported ‚úÖ Social logins (GitHub, Google, GitLab, SSO) ‚úÖ Lightweight (Go-based) ‚úÖ Privacy-focused ‚úÖ Markdown support ‚úÖ Voting feature Disadvantages # ‚ùå Self-hosting required ‚ùå Fewer features than Remark42 Implementation Difficulty # ‚≠ê‚≠ê‚≠ê‚≠ê (4/5)\nDocker Deployment # version: \u0026#39;3.8\u0026#39; services: comentario: image: registry.gitlab.com/comentario/comentario ports: - \u0026#34;8080:8080\u0026#34; environment: - COMENTARIO_ORIGIN=https://comments.your-blog.com - COMENTARIO_BIND=0.0.0.0:8080 - COMENTARIO_POSTGRES=postgres://user:pass@db/comentario depends_on: - db db: image: postgres:15 environment: - POSTGRES_DB=comentario - POSTGRES_USER=comentario - POSTGRES_PASSWORD=change-this volumes: - postgres_data:/var/lib/postgresql/data volumes: postgres_data: Blog Embed # \u0026lt;script defer src=\u0026#34;https://comments.your-blog.com/js/commento.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;commento\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; Recommended For # Alternative to Remark42 Want simpler system 5. Disqus (Traditional SaaS) # Concept # Oldest and most widely used cloud comment system\nHow It Works # 1. Create Disqus account and register site ‚Üì 2. Insert Disqus script on blog ‚Üì 3. User chooses: - Guest (anonymous - requires email) - Disqus account - Facebook/Twitter/Google login ‚Üì 4. Save to Disqus server ‚Üì 5. Display on blog Advantages # ‚úÖ Extremely simple setup (5 minutes) ‚úÖ No server required (SaaS) ‚úÖ Guest mode (comment with just email) ‚úÖ Social logins (Facebook, Twitter, Google) ‚úÖ Powerful admin tools ‚úÖ Spam filter (Akismet integration) ‚úÖ Mobile apps (iOS/Android) ‚úÖ Analytics/Statistics Disadvantages # ‚ùå Shows ads (free plan) ‚ùå Heavy (script size) ‚ùå Privacy concerns (data tracking) ‚ùå No data ownership (Disqus servers) ‚ùå No GitHub login ‚ùå Ad removal cost ($11.99/month~) Implementation Difficulty # ‚≠ê (1/5) - Easiest\nSetup Method # Step 1: Register Disqus Site # 1. Sign up at disqus.com 2. Select \u0026#34;I want to install Disqus on my site\u0026#34; 3. Enter Website Name (e.g., andwild-blog) 4. Select Category 5. Select Plan (Basic - Free) Step 2: Configure Blowfish # # config/_default/config.toml [services.disqus] shortname = \u0026#34;andwild-blog\u0026#34; # Name created in Step 1 # config/_default/params.toml [article] showComments = true Hugo has built-in Disqus support, so comments display automatically!\nStep 3: Allow Guest Comments # Disqus Dashboard ‚Üí Settings ‚Üí Community ‚Üí Guest Commenting: Allow guests to comment (check) Ad Removal Methods # Method 1: Paid Plan ($11.99/month~) # Plus Plan: No ads Pro Plan: No ads + advanced features Method 2: Hide with CSS (Not recommended - may violate terms) # /* Not recommended: May violate Disqus terms */ #disqus_thread iframe[src*=\u0026#34;ads\u0026#34;] { display: none !important; } Cost # Free: With ads Plus: $11.99/month (no ads) Pro: $89/month (advanced features) Recommended For # ‚úÖ Want to add comments quickly ‚úÖ Non-technical bloggers ‚úÖ Don\u0026rsquo;t mind ads ‚ùå Not recommended for privacy-conscious users 6. Cusdis (Free Vercel Deployment) # Concept # Lightweight open-source comment system, deployable to Vercel for free\nHow It Works # 1. Deploy Cusdis to Vercel (1-Click) ‚Üì 2. Connect PostgreSQL (Vercel free) ‚Üì 3. Add site in dashboard ‚Üì 4. Insert script on blog ‚Üì 5. Users comment with email + name Advantages # ‚úÖ Completely free (Vercel free tier) ‚úÖ Anonymous comments (just email + name) ‚úÖ Lightweight (50KB) ‚úÖ Simple setup (Vercel 1-Click deploy) ‚úÖ Privacy-focused ‚úÖ Open source Disadvantages # ‚ùå No Markdown support ‚ùå No social login ‚ùå Simple features Implementation Difficulty # ‚≠ê‚≠ê‚≠ê (3/5)\nSetup Method # Step 1: Deploy to Vercel # 1. Visit https://cusdis.com/ 2. Click \u0026#34;Deploy with Vercel\u0026#34; 3. Connect GitHub 4. Add PostgreSQL (Vercel Storage) 5. Deployment complete Step 2: Add Site # 1. Access deployed Cusdis dashboard 2. Click \u0026#34;Add Website\u0026#34; 3. Enter Domain: 0andwild.github.io 4. Copy App ID Step 3: Blog Embed # \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;div id=\u0026#34;cusdis_thread\u0026#34; data-host=\u0026#34;https://your-cusdis.vercel.app\u0026#34; data-app-id=\u0026#34;YOUR_APP_ID\u0026#34; data-page-id=\u0026#34;{{ .File.UniqueID }}\u0026#34; data-page-url=\u0026#34;{{ .Permalink }}\u0026#34; data-page-title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script async defer src=\u0026#34;https://your-cusdis.vercel.app/js/cusdis.es.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Cost # Completely free (Vercel free tier)\nRecommended For # ‚úÖ Need only simple anonymous comments ‚úÖ Want completely free solution ‚úÖ Have Vercel experience 7. HashOver # Concept # PHP-based fully anonymous comment system\nAdvantages # ‚úÖ Fully anonymous (no information needed) ‚úÖ PHP + flat file (no DB required) ‚úÖ Open source Disadvantages # ‚ùå Requires PHP (unsuitable for static sites) ‚ùå No GitHub login ‚ùå Old project Implementation Difficulty # ‚≠ê‚≠ê‚≠ê‚≠ê (4/5)\nRecommended For # ‚ùå Not recommended for static blogs Consider only if you have a PHP server 8. Hyvor Talk (Premium SaaS) # Concept # Ad-free premium comment system\nAdvantages # ‚úÖ No ads ‚úÖ Anonymous comments supported ‚úÖ Social logins ‚úÖ Powerful spam filter Disadvantages # ‚ùå Paid ($5/month~) ‚ùå No GitHub login Cost # Starter: $5/month (1 site) Pro: $15/month (3 sites) Recommended For # Paid alternative to Disqus Want ad-free SaaS Comparison Tables # By Authentication Method # System Anonymous GitHub Google Other Social Difficulty Cost Giscus ‚ùå ‚úÖ ‚ùå ‚ùå ‚≠ê‚≠ê Free Utterances ‚ùå ‚úÖ ‚ùå ‚ùå ‚≠ê‚≠ê Free Remark42 ‚úÖ ‚úÖ ‚úÖ ‚úÖ ‚≠ê‚≠ê‚≠ê‚≠ê $5/mo Comentario ‚úÖ ‚úÖ ‚úÖ ‚úÖ ‚≠ê‚≠ê‚≠ê‚≠ê $5/mo Disqus ‚ö†Ô∏è ‚ùå ‚úÖ ‚úÖ ‚≠ê Free (ads) Cusdis ‚úÖ ‚ùå ‚ùå ‚ùå ‚≠ê‚≠ê‚≠ê Free Hyvor Talk ‚úÖ ‚ùå ‚úÖ ‚úÖ ‚≠ê $5/mo By Features # System Markdown Reactions Voting Notifications Admin Spam Filter Giscus ‚úÖ ‚úÖ ‚ùå ‚úÖ ‚ö†Ô∏è ‚úÖ Remark42 ‚úÖ ‚ùå ‚úÖ ‚úÖ ‚úÖ ‚úÖ Disqus ‚ö†Ô∏è ‚ùå ‚úÖ ‚úÖ ‚úÖ ‚úÖ Cusdis ‚ùå ‚ùå ‚ùå ‚ö†Ô∏è ‚úÖ ‚ö†Ô∏è By Hosting # System Hosting Data Location Dependency Giscus GitHub GitHub Discussions GitHub Remark42 Self Your server Docker Disqus Disqus Disqus servers Disqus Cusdis Vercel Vercel DB Vercel Selection Guide # Scenario-Based Recommendations # 1. \u0026ldquo;Developer blog, targeting GitHub users\u0026rdquo; # ‚Üí Giscus ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\nFree, simple, Markdown support GitHub integration makes notifications convenient 2. \u0026ldquo;General blog, anonymous comments essential\u0026rdquo; # ‚Üí Cusdis (simple) or Remark42 (advanced)\nCusdis: 5-minute setup, completely free Remark42: More features, includes social login 3. \u0026ldquo;Both anonymous + GitHub login\u0026rdquo; # ‚Üí Remark42 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\nOnly option supporting both Powerful admin features 4. \u0026ldquo;No technical skills, quick setup\u0026rdquo; # ‚Üí Disqus\n5-minute setup Accept ads 5. \u0026ldquo;Completely free + don\u0026rsquo;t want server management\u0026rdquo; # ‚Üí Giscus (GitHub) or Cusdis (anonymous)\n6. \u0026ldquo;Privacy is top priority\u0026rdquo; # ‚Üí Remark42 or Comentario (self-hosted)\nComplete data control Practical Implementation: Blowfish + Giscus # Complete Setup Process # 1. Enable GitHub Discussions # GitHub Repository ‚Üí Settings ‚Üí Features ‚Üí Check Discussions 2. Install Giscus App # Visit https://github.com/apps/giscus ‚Üí Install ‚Üí Select repository 3. Generate Giscus Configuration # At giscus.app:\nRepository: 0AndWild/0AndWild.github.io Mapping: pathname Category: Announcements Theme: preferred_color_scheme Language: en Copy generated code\n4. Create File # # Create directory (if not exists) mkdir -p layouts/partials # Create file touch layouts/partials/comments.html 5. Insert Code # \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;0AndWild/0AndWild.github.io\u0026#34; data-repo-id=\u0026#34;R_xxxxxxxxxxxxx\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_xxxxxxxxxxxxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 6. Modify params.toml # [article] showComments = true 7. Local Testing # hugo server -D # Check at http://localhost:1313 8. Deploy # git add . git commit -m \u0026#34;Add Giscus comments\u0026#34; git push Practical Implementation: Blowfish + Remark42 (Railway) # Complete Setup Process # 1. Create GitHub OAuth App # GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí OAuth Apps ‚Üí New OAuth App Application name: AndWild Blog Comments Homepage URL: https://0andwild.github.io Authorization callback URL: https://your-remark42.railway.app/auth/github/callback After creation: Copy Client ID Generate and copy Client Secret 2. Deploy to Railway # 1. Sign up for railway.app 2. \u0026#34;New Project\u0026#34; ‚Üí \u0026#34;Deploy Docker Image\u0026#34; 3. Image: umputun/remark42:latest 4. Add environment variables: REMARK_URL=https://your-project.railway.app SECRET=randomly-generated-secret-key-change-this SITE=0andwild-blog AUTH_ANON=true AUTH_GITHUB_CID=your_github_client_id AUTH_GITHUB_CSEC=your_github_client_secret ADMIN_SHARED_ID=github_yourusername 3. Verify Deployment # Railway automatically generates URL: https://your-project.railway.app Access in browser to verify Remark42 UI 4. Configure Blowfish # mkdir -p layouts/partials touch layouts/partials/comments.html \u0026lt;!-- layouts/partials/comments.html --\u0026gt; \u0026lt;div id=\u0026#34;remark42\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var remark_config = { host: \u0026#39;https://your-project.railway.app\u0026#39;, site_id: \u0026#39;0andwild-blog\u0026#39;, components: [\u0026#39;embed\u0026#39;], theme: \u0026#39;light\u0026#39;, locale: \u0026#39;en\u0026#39; }; (function(c) { for(var i = 0; i \u0026lt; c.length; i++){ var d = document, s = d.createElement(\u0026#39;script\u0026#39;); s.src = remark_config.host + \u0026#39;/web/\u0026#39; +c[i] +\u0026#39;.js\u0026#39;; s.defer = true; (d.head || d.body).appendChild(s); } })(remark_config.components || [\u0026#39;embed\u0026#39;]); \u0026lt;/script\u0026gt; 5. params.toml # [article] showComments = true 6. Test and Deploy # hugo server -D # After verification git add . git commit -m \u0026#34;Add Remark42 comments\u0026#34; git push Migration Guide # Disqus ‚Üí Giscus # 1. Export data from Disqus (XML) 2. Manual migration to GitHub Discussions (No automation script, manual work required) Disqus ‚Üí Remark42 # 1. Disqus XML Export 2. Remark42 Admin ‚Üí Import ‚Üí Select Disqus 3. Upload XML file Conclusion # Final Recommendations # Situation Recommended System Reason Developer blog Giscus Free, GitHub integration, Markdown General blog (anonymous needed) Cusdis Free, simple, anonymous Both anonymous + social Remark42 Flexible, all features Quick setup Disqus 5-minute completion (accept ads) Complete control Remark42 Self-hosted, customizable Personal Recommendation (0AndWild Blog) # Giscus recommended\nPerfect fit for GitHub Pages blog Tech blog\u0026rsquo;s main audience is GitHub users Free, simple, no maintenance Alternative: Remark42 (when anonymous comments desired)\nQuick Start # Start with Giscus (10 minutes) Collect user feedback Consider switching to Remark42 if many requests for anonymous comments Comment systems can be changed later, so strongly recommend starting with Giscus!\n","date":"2025-10-17","externalUrl":null,"permalink":"/en/posts/comments_guide/","section":"Posts","summary":"Pros, cons, and implementation methods for all comment systems: Giscus, Utterances, Remark42, Disqus, and more","title":"Complete Guide to Comment Systems for Static Blogs","type":"posts"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/github-pages/","section":"Tags","summary":"","title":"GitHub Pages","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/static-site/","section":"Tags","summary":"","title":"Static Site","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/automation/","section":"Tags","summary":"","title":"Automation","type":"tags"},{"content":" Overview # This guide analyzes methods to add subscription and email notification features to blogs built with static site generators (Hugo). We\u0026rsquo;ll cover everything from basic subscriptions to keyword-based selective notifications.\n1. RSS Feed + Email Services # Concept # Leverage services that convert Hugo\u0026rsquo;s built-in RSS Feed into email notifications.\nMethod A: Blogtrottr # How It Works # 1. Hugo automatically generates RSS Feed (index.xml) ‚Üì 2. Users register RSS URL on Blogtrottr ‚Üì 3. Blogtrottr periodically checks RSS ‚Üì 4. Sends email when new posts detected Advantages # ‚úÖ No developer work (just provide link) ‚úÖ Completely free ‚úÖ Works immediately ‚úÖ No server required Disadvantages # ‚ùå No subscriber management ‚ùå No email design customization ‚ùå No analytics ‚ùå No keyword filtering ‚ùå Users must register on external site Implementation Difficulty # ‚≠ê (1/5) - Easiest\nUsage Example # Add link to blog: [Subscribe via Email](https://blogtrottr.com) (Enter https://0andwild.github.io/index.xml on the site) Method B: FeedBurner (Google) # How It Works # 1. Register RSS Feed with FeedBurner ‚Üì 2. FeedBurner proxies/manages RSS ‚Üì 3. Embed subscription form on blog ‚Üì 4. Users subscribe directly from blog ‚Üì 5. Auto-sends email when new posts published Advantages # ‚úÖ Basic analytics provided ‚úÖ Subscription form provided ‚úÖ Free ‚úÖ RSS management features Disadvantages # ‚ùå Google may discontinue support (updates stopped) ‚ùå No keyword filtering ‚ùå Limited customization ‚ùå Outdated UI Implementation Difficulty # ‚≠ê‚≠ê (2/5)\n2. Mailchimp + RSS Campaign (Recommended) # Concept # Leverage professional email marketing platform to automatically convert RSS Feed to emails\nHow It Works # 1. Create RSS Campaign in Mailchimp ‚Üì 2. Register RSS URL and set check frequency (daily/weekly/monthly) ‚Üì 3. Embed Mailchimp subscription form on blog ‚Üì 4. Users enter email to subscribe ‚Üì 5. Auto-generates email template when new post detected ‚Üì 6. Sends to all subscribers Advantages # ‚úÖ Free tier: Up to 2,000 subscribers ‚úÖ Professional email design (drag-and-drop editor) ‚úÖ Subscriber management (add/delete/segment) ‚úÖ Detailed analytics (open rate, click rate, unsubscribe rate) ‚úÖ Auto-generated subscription forms (embed code provided) ‚úÖ Automation (only sends on new posts) ‚úÖ Mobile optimized ‚úÖ Spam filter avoidance (professional sending servers) Disadvantages # ‚ùå No keyword filtering by default (tag-based segmentation on Pro plan) ‚ùå Mailchimp logo shown on free tier ‚ùå Paid after 2,000 subscribers ($13/month+) Implementation Difficulty # ‚≠ê‚≠ê (2/5)\nSetup Steps # 1. Create Mailchimp account 2. Create Audience 3. Campaign ‚Üí Create ‚Üí Email ‚Üí RSS Campaign 4. Enter RSS URL: https://your-blog.com/index.xml 5. Set sending frequency (Daily/Weekly) 6. Design email template 7. Copy subscription form code 8. Insert in Hugo (layouts/partials/subscribe.html) Blog Embed Code Example # \u0026lt;!-- Mailchimp subscription form --\u0026gt; \u0026lt;div id=\u0026#34;mc_embed_signup\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;https://your-mailchimp-url.com/subscribe\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;EMAIL\u0026#34; placeholder=\u0026#34;Email address\u0026#34; required\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Subscribe\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; 3. Buttondown (Developer-Friendly, Recommended) # Concept # Markdown-based newsletter platform with API for customization\nHow It Works # 1. Connect RSS Feed to Buttondown ‚Üì 2. Auto-converts RSS items to Markdown emails ‚Üì 3. Subscribers can select tags/keywords ‚Üì 4. Filter subscribers by specific tags via API ‚Üì 5. Send only to matching subscribers Advantages # ‚úÖ Free tier: Up to 1,000 subscribers ‚úÖ Markdown-based (developer-friendly) ‚úÖ Powerful API (customizable) ‚úÖ Tag-based subscriptions (keyword filtering possible) ‚úÖ No ads ‚úÖ Clean UI ‚úÖ RSS import automation ‚úÖ Privacy-focused Disadvantages # ‚ùå Simple email design (Markdown only) ‚ùå Analytics weaker than Mailchimp ‚ùå Limited Korean support Implementation Difficulty # ‚≠ê‚≠ê‚≠ê (3/5) - Increases with API usage\nKeyword Notification Example # Step 1: Add tag selection to subscription form # \u0026lt;form action=\u0026#34;https://buttondown.email/api/emails/embed-subscribe/YOUR_ID\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34; required\u0026gt; \u0026lt;label\u0026gt;Select topics of interest:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags\u0026#34; value=\u0026#34;kubernetes\u0026#34;\u0026gt; Kubernetes \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags\u0026#34; value=\u0026#34;docker\u0026#34;\u0026gt; Docker \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags\u0026#34; value=\u0026#34;golang\u0026#34;\u0026gt; Go \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Subscribe\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; Step 2: Selective sending via GitHub Actions # name: Send Newsletter on: push: paths: - \u0026#39;content/posts/**\u0026#39; jobs: send: runs-on: ubuntu-latest steps: - name: Extract tags from post run: | TAGS=$(grep \u0026#34;^tags = \u0026#34; content/posts/*/index.md | cut -d\u0026#39;\u0026#34;\u0026#39; -f2) echo \u0026#34;POST_TAGS=$TAGS\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - name: Send to matching subscribers run: | curl -X POST https://api.buttondown.email/v1/emails \\ -H \u0026#34;Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}\u0026#34; \\ -d \u0026#34;subject=New Post\u0026#34; \\ -d \u0026#34;body=...\u0026#34; \\ -d \u0026#34;tag=$POST_TAGS\u0026#34; 4. SendGrid + GitHub Actions (Fully Custom) # Concept # Build fully customized notification system combining email sending API with CI/CD\nHow It Works # 1. Write new post and Git Push ‚Üì 2. GitHub Actions triggered ‚Üì 3. Action parses Front Matter - Extract title, summary, tags ‚Üì 4. Query subscriber DB (Supabase/JSON file) - Match each subscriber\u0026#39;s keywords ‚Üì 5. Filter matching subscribers only ‚Üì 6. Send individual emails via SendGrid API Advantages # ‚úÖ Complete control (customize all logic) ‚úÖ Perfect keyword notification implementation ‚úÖ Free tier: SendGrid 100 emails/month ‚úÖ Automation (just git push) ‚úÖ Scalable (DB, logic freely customizable) ‚úÖ Own subscriber data Disadvantages # ‚ùå Development work required ‚ùå Maintenance burden ‚ùå SendGrid free tier limited (100 emails/month) ‚ùå Must implement subscription form and DB yourself ‚ùå Spam filter avoidance setup needed Implementation Difficulty # ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5/5) - Most complex\nArchitecture # Subscriber Database Options # Option A: JSON File (Simple)\n// subscribers.json (encrypted in GitHub repository) [ { \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;keywords\u0026#34;: [\u0026#34;kubernetes\u0026#34;, \u0026#34;docker\u0026#34;], \u0026#34;active\u0026#34;: true }, { \u0026#34;email\u0026#34;: \u0026#34;dev@example.com\u0026#34;, \u0026#34;keywords\u0026#34;: [\u0026#34;golang\u0026#34;, \u0026#34;rust\u0026#34;], \u0026#34;active\u0026#34;: true } ] Option B: Supabase (Recommended)\n-- subscribers table CREATE TABLE subscribers ( id UUID PRIMARY KEY, email TEXT UNIQUE NOT NULL, keywords TEXT[], -- array type active BOOLEAN DEFAULT true, created_at TIMESTAMP DEFAULT NOW() ); GitHub Actions Workflow # name: Email Notification on: push: branches: [main] paths: - \u0026#39;content/posts/**\u0026#39; jobs: notify: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: \u0026#39;18\u0026#39; - name: Extract Post Metadata id: metadata run: | # Find most recently modified post POST_FILE=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep \u0026#39;content/posts\u0026#39; | head -1) # Parse Front Matter TITLE=$(grep \u0026#34;^title = \u0026#34; $POST_FILE | cut -d\u0026#39;\u0026#34;\u0026#39; -f2) TAGS=$(grep \u0026#34;^tags = \u0026#34; $POST_FILE | sed \u0026#39;s/tags = \\[//;s/\\]//;s/\u0026#34;//g\u0026#39;) SUMMARY=$(grep \u0026#34;^summary = \u0026#34; $POST_FILE | cut -d\u0026#39;\u0026#34;\u0026#39; -f2) URL=\u0026#34;https://0andwild.github.io/$(dirname $POST_FILE | sed \u0026#39;s/content\\///\u0026#39;)\u0026#34; echo \u0026#34;title=$TITLE\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT echo \u0026#34;tags=$TAGS\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT echo \u0026#34;summary=$SUMMARY\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT echo \u0026#34;url=$URL\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT - name: Query Matching Subscribers id: subscribers run: | # Query matching subscribers from Supabase curl -X POST https://YOUR_PROJECT.supabase.co/rest/v1/rpc/get_matching_subscribers \\ -H \u0026#34;apikey: ${{ secrets.SUPABASE_KEY }}\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;post_tags\\\u0026#34;: \\\u0026#34;${{ steps.metadata.outputs.tags }}\\\u0026#34;}\u0026#34; \\ \u0026gt; subscribers.json - name: Send Emails via SendGrid run: | # Execute Node.js script cat \u0026gt; send-emails.js \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; const sgMail = require(\u0026#39;@sendgrid/mail\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); sgMail.setApiKey(process.env.SENDGRID_API_KEY); const subscribers = JSON.parse(fs.readFileSync(\u0026#39;subscribers.json\u0026#39;)); const title = process.env.POST_TITLE; const summary = process.env.POST_SUMMARY; const url = process.env.POST_URL; subscribers.forEach(async (subscriber) =\u0026gt; { const msg = { to: subscriber.email, from: \u0026#39;noreply@0andwild.github.io\u0026#39;, subject: `New Post: ${title}`, html: ` \u0026lt;h2\u0026gt;${title}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;${summary}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Matched keywords: ${subscriber.matched_keywords.join(\u0026#39;, \u0026#39;)}\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;${url}\u0026#34;\u0026gt;Read Post\u0026lt;/a\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;small\u0026gt;\u0026lt;a href=\u0026#34;https://0andwild.github.io/unsubscribe?token=${subscriber.token}\u0026#34;\u0026gt;Unsubscribe\u0026lt;/a\u0026gt;\u0026lt;/small\u0026gt; ` }; await sgMail.send(msg); console.log(`Email sent to ${subscriber.email}`); }); EOF npm install @sendgrid/mail node send-emails.js env: SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }} POST_TITLE: ${{ steps.metadata.outputs.title }} POST_SUMMARY: ${{ steps.metadata.outputs.summary }} POST_URL: ${{ steps.metadata.outputs.url }} Subscription Form Implementation (Hugo Shortcode) # \u0026lt;!-- layouts/shortcodes/subscribe.html --\u0026gt; \u0026lt;div class=\u0026#34;subscription-form\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Subscribe to Blog\u0026lt;/h3\u0026gt; \u0026lt;form id=\u0026#34;subscribe-form\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email address\u0026#34; required\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Select topics of interest (get notified only for selected topics)\u0026lt;/legend\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;keywords\u0026#34; value=\u0026#34;kubernetes\u0026#34;\u0026gt; Kubernetes\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;keywords\u0026#34; value=\u0026#34;docker\u0026#34;\u0026gt; Docker\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;keywords\u0026#34; value=\u0026#34;golang\u0026#34;\u0026gt; Go\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;keywords\u0026#34; value=\u0026#34;rust\u0026#34;\u0026gt; Rust\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;keywords\u0026#34; value=\u0026#34;devops\u0026#34;\u0026gt; DevOps\u0026lt;/label\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Subscribe\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;subscribe-form\u0026#39;).addEventListener(\u0026#39;submit\u0026#39;, async (e) =\u0026gt; { e.preventDefault(); const email = document.getElementById(\u0026#39;email\u0026#39;).value; const keywords = Array.from(document.querySelectorAll(\u0026#39;input[name=\u0026#34;keywords\u0026#34;]:checked\u0026#39;)) .map(cb =\u0026gt; cb.value); // Save to Supabase const response = await fetch(\u0026#39;https://YOUR_PROJECT.supabase.co/rest/v1/subscribers\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;apikey\u0026#39;: \u0026#39;YOUR_ANON_KEY\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ email, keywords, active: true }) }); if (response.ok) { alert(\u0026#39;Successfully subscribed!\u0026#39;); } else { alert(\u0026#39;An error occurred.\u0026#39;); } }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; Supabase Function (Keyword Matching) # -- Function to find matching subscribers CREATE OR REPLACE FUNCTION get_matching_subscribers(post_tags TEXT) RETURNS TABLE(email TEXT, matched_keywords TEXT[], token TEXT) AS $$ BEGIN RETURN QUERY SELECT s.email, ARRAY( SELECT unnest(s.keywords) INTERSECT SELECT unnest(string_to_array(post_tags, \u0026#39;,\u0026#39;)) ) as matched_keywords, s.unsubscribe_token as token FROM subscribers s WHERE s.active = true AND s.keywords \u0026amp;\u0026amp; string_to_array(post_tags, \u0026#39;,\u0026#39;) -- array overlap operator ; END; $$ LANGUAGE plpgsql; Cost Analysis # SendGrid: 100 emails/month free (then $19.95/month) Supabase: 500MB DB, 2GB transfer free per month GitHub Actions: 2,000 minutes/month free Total cost: Completely free (for small blogs) 5. Fully Custom (Supabase + GitHub Actions + Resend) # SendGrid Alternative: Resend # More developer-friendly modern email API than SendGrid\nAdvantages # ‚úÖ Free tier: 3,000 emails/month (30x more than SendGrid!) ‚úÖ Simpler API ‚úÖ React Email support (write emails in JSX) ‚úÖ Better developer experience Resend Usage Example # import { Resend } from \u0026#39;resend\u0026#39;; const resend = new Resend(process.env.RESEND_API_KEY); await resend.emails.send({ from: \u0026#39;blog@0andwild.github.io\u0026#39;, to: subscriber.email, subject: `New Post: ${title}`, html: `\u0026lt;p\u0026gt;${summary}\u0026lt;/p\u0026gt;\u0026lt;a href=\u0026#34;${url}\u0026#34;\u0026gt;Read\u0026lt;/a\u0026gt;` }); Comparison Table # Method Free Limit Keyword Alerts Difficulty Subscriber Mgmt Custom Recommend Blogtrottr Unlimited ‚ùå ‚≠ê ‚ùå ‚ùå Testing only FeedBurner Unlimited ‚ùå ‚≠ê‚≠ê ‚ö†Ô∏è ‚ö†Ô∏è Not recommended (discontinued) Mailchimp 2,000 ‚ö†Ô∏è (Pro) ‚≠ê‚≠ê ‚úÖ ‚ö†Ô∏è General subscriptions Buttondown 1,000 ‚úÖ ‚≠ê‚≠ê‚≠ê ‚úÖ ‚úÖ For developers SendGrid + Actions 100/month ‚úÖ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚úÖ ‚úÖ‚úÖ Advanced users Resend + Actions 3,000/month ‚úÖ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚úÖ ‚úÖ‚úÖ Perfect control Recommended Roadmap # Stage 1: Quick Start (Immediate) # Mailchimp RSS Campaign\n10-minute setup All subscribers get all posts Stage 2: Improvement (After 1 week) # Migrate to Buttondown\nCleaner experience Basic tag features Stage 3: Advanced Features (When needed) # Resend + GitHub Actions + Supabase\nKeyword-based selective notifications Complete control Scalability Conclusion # For general bloggers: # ‚Üí Mailchimp (easiest and most professional)\nFor developer blogs: # ‚Üí Buttondown (developer-friendly, provides API)\nIf keyword alerts are essential: # ‚Üí Resend + GitHub Actions + Supabase (fully custom)\nTo test without spending money: # ‚Üí Blogtrottr (30-second setup)\nQuick Start # If you want actual implementation:\nStart with Mailchimp (low learning curve) Consider Buttondown when traffic grows Build custom solution when advanced features needed Keyword alerts may be overkill initially, so it\u0026rsquo;s recommended to start with basic subscriptions.\n","date":"2025-10-17","externalUrl":null,"permalink":"/en/posts/subscription_alert/","section":"Posts","summary":"Everything about blog subscription systems - from RSS Feed and Mailchimp to custom solutions","title":"Complete Guide to Blog Subscription and Email Notification Systems","type":"posts"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/email/","section":"Tags","summary":"","title":"Email","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/rss/","section":"Tags","summary":"","title":"RSS","type":"tags"},{"content":"","date":"2025-10-17","externalUrl":null,"permalink":"/en/tags/subscription/","section":"Tags","summary":"","title":"Subscription","type":"tags"},{"content":"","date":"2025-10-16","externalUrl":null,"permalink":"/en/categories/blowfish/","section":"Categories","summary":"","title":"Blowfish","type":"categories"},{"content":"","date":"2025-10-16","externalUrl":null,"permalink":"/en/series/blowfish/","section":"Series","summary":"","title":"Blowfish","type":"series"},{"content":" Heading (H2) # Subheading (H3) # Regular text. Bold, Italic, Strikethrough\nImages # Method 1: Local Image # Place image file in the post folder:\n![Image description](image.jpg) Method 2: External Image URL # ![Image description](https://example.com/image.jpg) Method 3: HTML Tag (with size control) # \u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;Image description\u0026#34; width=\u0026#34;500\u0026#34; /\u0026gt; Carousel Images (Slideshow) # 16:9 # Previous Next 21:9 Previous Next # Code Blocks # Inline Code # Use inline code format\nCode Blocks # package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } def hello(): print(\u0026#34;Hello, World!\u0026#34;) docker run -d -p 8080:80 nginx Links # Basic Link # Link text\nReference Style Link # Link text\nArticle Reference # Lists # Unordered List # Item 1 Item 2 Sub-item 2-1 Sub-item 2-2 Item 3 Ordered List # First Second Third Checklist # Todo 1 Completed Todo 2 Blockquote # This is a blockquote. Multiple lines are supported.\nTable # Item Description Note A Description A Note A B Description B Note B Embedded Links (Shortcodes) # YouTube Video # {{\u0026lt; youtube VIDEO_ID \u0026gt;}}\nTwitter/X # {{\u0026lt; twitter user=\u0026ldquo;username\u0026rdquo; id=\u0026ldquo;tweet_id\u0026rdquo; \u0026gt;}}\nGitHub Gist # {{\u0026lt; gist username gist_id \u0026gt;}}\nAlert Boxes (Blowfish Alert) # {{\u0026lt; alert \u0026ldquo;circle-info\u0026rdquo; \u0026gt;}} Information alert. {{\u0026lt; /alert \u0026gt;}}\n{{\u0026lt; alert \u0026ldquo;lightbulb\u0026rdquo; \u0026gt;}} Tips and ideas. {{\u0026lt; /alert \u0026gt;}}\n{{\u0026lt; alert \u0026ldquo;triangle-exclamation\u0026rdquo; \u0026gt;}} Warning message. {{\u0026lt; /alert \u0026gt;}}\nCollapsible (Details) # Click to expand Hidden content appears here.\nComments # Horizontal Rule # Use to create dividing lines:\nFootnotes # You can add footnotes1 to text.\nChart # Mermaid Diagram # graph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] Swatches (color showcase) # TypeIt # (Ex1)\n(Ex2)\n(Ex3)\nYoutube Lite # Writing Tips:\nChange draft: true to false in front matter to publish Writing description and summary helps with SEO It\u0026rsquo;s recommended to place images in the post folder This is the footnote content.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025-10-16","externalUrl":null,"permalink":"/en/posts/blowfish_markdown/","section":"Posts","summary":"Blowfish Markdown Syntax Guide","title":"Hugo Markdown Guide","type":"posts"},{"content":"","date":"2025-10-16","externalUrl":null,"permalink":"/en/tags/markdown/","section":"Tags","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"2025-10-16","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" About This Blog Welcome to 0AndWild Tech Blog! This is a space where I share my thoughts, experiences, and learnings about backend development, infrastructure, and various technologies.\nWho Am I? A backend developer with 3 years of experience, passionate about exploring new technologies and solving complex problems.\nMy Values I feel a sense of achievement when I solve problems, even if it takes time. I enjoy communicating and sharing what I\u0026rsquo;ve learned with others. I prefer pioneering new paths rather than pursuing only stability. I don\u0026rsquo;t fear failure; I see it as an experience. What You\u0026rsquo;ll Find Here Backend Development: Deep dives into backend architectures, patterns, and best practices Infrastructure: DevOps, Docker, Kubernetes, and cloud technologies Tech Explorations: Hands-on experiences with new tools and frameworks Get In Touch GitHub LinkedIn Email Thanks for visiting! üöÄ\n","date":"2025-10-16","externalUrl":null,"permalink":"/en/about/","section":"0AndWild_log","summary":"\u003ch1 class=\"relative group\"\u003eAbout This Blog\n    \u003cdiv id=\"about-this-blog\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h1\u003e\n\u003cp\u003eWelcome to \u003cstrong\u003e0AndWild Tech Blog\u003c/strong\u003e! This is a space where I share my thoughts, experiences, and learnings about backend development, infrastructure, and various technologies.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003eWho Am I?\n    \u003cdiv id=\"who-am-i\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\u003cp\u003eA backend developer with 3 years of experience, passionate about exploring new technologies and solving complex problems.\u003c/p\u003e\n\n\u003ch3 class=\"relative group\"\u003eMy Values\n    \u003cdiv id=\"my-values\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI feel a sense of achievement when I solve problems, even if it takes time.\u003c/li\u003e\n\u003cli\u003eI enjoy communicating and sharing what I\u0026rsquo;ve learned with others.\u003c/li\u003e\n\u003cli\u003eI prefer pioneering new paths rather than pursuing only stability.\u003c/li\u003e\n\u003cli\u003eI don\u0026rsquo;t fear failure; I see it as an experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 class=\"relative group\"\u003eWhat You\u0026rsquo;ll Find Here\n    \u003cdiv id=\"what-youll-find-here\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBackend Development\u003c/strong\u003e: Deep dives into backend architectures, patterns, and best practices\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInfrastructure\u003c/strong\u003e: DevOps, Docker, Kubernetes, and cloud technologies\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTech Explorations\u003c/strong\u003e: Hands-on experiences with new tools and frameworks\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 class=\"relative group\"\u003eGet In Touch\n    \u003cdiv id=\"get-in-touch\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\n\n\n\u003ca\n  class=\"github-button !rounded-md border-2 px-4 py-2 !no-underline inline-block transition-all mr-2 mb-2\"\n  style=\"color: #24292e; border-color: #24292e;\"\n  onmouseover=\"this.style.backgroundColor='rgba(36, 41, 46, 0.1)'\"\n  onmouseout=\"this.style.backgroundColor='transparent'\"\n  href=\"https://github.com/0AndWild\"\n  target=\"_blank\"\n  \n  role=\"button\"\u003e\n  \n\u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"/\u003e\u003c/svg\u003e\u003c/span\u003e GitHub\n\n\u003c/a\u003e\n\u003cstyle\u003e\n  @media (prefers-color-scheme: dark) {\n    .github-button {\n      color: #ffffff !important;\n      border-color: #ffffff !important;\n    }\n  }\n  .dark .github-button {\n    color: #ffffff !important;\n    border-color: #ffffff !important;\n  }\n\u003c/style\u003e\n\n\n\n\n\n\u003ca\n  class=\"!rounded-md border-2 px-4 py-2 !no-underline inline-block transition-all hover:bg-opacity-10 mr-2 mb-2\"\n  style=\"color: #0077b5; border-color: #0077b5;\"\n  onmouseover=\"this.style.backgroundColor='rgba(0, 119, 181, 0.1)'\"\n  onmouseout=\"this.style.backgroundColor='transparent'\"\n  href=\"https://linkedin.com/in/%ea%b1%b4%ec%98%81-%eb%b0%95-158861275\"\n  target=\"_blank\"\n  \n  role=\"button\"\u003e\n  \n\u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\"/\u003e\u003c/svg\u003e\u003c/span\u003e LinkedIn\n\n\u003c/a\u003e\n\n\n\n\n\n\u003ca\n  class=\"!rounded-md border-2 px-4 py-2 !no-underline inline-block transition-all hover:bg-opacity-10 mr-2 mb-2\"\n  style=\"color: #ea4335; border-color: #ea4335;\"\n  onmouseover=\"this.style.backgroundColor='rgba(234, 67, 53, 0.1)'\"\n  onmouseout=\"this.style.backgroundColor='transparent'\"\n  href=\"mailto:parkky3563@gmail.com\"\n  \n  \n  role=\"button\"\u003e\n  \n\u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M207.8 20.73c-93.45 18.32-168.7 93.66-187 187.1c-27.64 140.9 68.65 266.2 199.1 285.1c19.01 2.888 36.17-12.26 36.17-31.49l.0001-.6631c0-15.74-11.44-28.88-26.84-31.24c-84.35-12.98-149.2-86.13-149.2-174.2c0-102.9 88.61-185.5 193.4-175.4c91.54 8.869 158.6 91.25 158.6 183.2l0 16.16c0 22.09-17.94 40.05-40 40.05s-40.01-17.96-40.01-40.05v-120.1c0-8.847-7.161-16.02-16.01-16.02l-31.98 .0036c-7.299 0-13.2 4.992-15.12 11.68c-24.85-12.15-54.24-16.38-86.06-5.106c-38.75 13.73-68.12 48.91-73.72 89.64c-9.483 69.01 43.81 128 110.9 128c26.44 0 50.43-9.544 69.59-24.88c24 31.3 65.23 48.69 109.4 37.49C465.2 369.3 496 324.1 495.1 277.2V256.3C495.1 107.1 361.2-9.332 207.8 20.73zM239.1 304.3c-26.47 0-48-21.56-48-48.05s21.53-48.05 48-48.05s48 21.56 48 48.05S266.5 304.3 239.1 304.3z\"/\u003e\u003c/svg\u003e\u003c/span\u003e Email\n\n\u003c/a\u003e\n\n\n\u003chr\u003e\n\u003cp\u003eThanks for visiting! üöÄ\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/tags/container/","section":"Tags","summary":"","title":"Container","type":"tags"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/series/deep-dive-into-docker/","section":"Series","summary":"","title":"Deep Dive Into Docker","type":"series"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/tags/devops/","section":"Tags","summary":"","title":"DevOps","type":"tags"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/categories/docker/","section":"Categories","summary":"","title":"Docker","type":"categories"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/en/tags/virtualization/","section":"Tags","summary":"","title":"Virtualization","type":"tags"},{"content":" Docker is an open-source containerization platform that enables applications to run quickly and reliably across different computing environments by packaging code and dependencies. üê≥ What is Docker? # Docker\u0026rsquo;s core concepts are broadly divided into two: Container and Image\nDocker Image # A Docker Image is a lightweight, standalone software package that includes code, runtime, system tools, system libraries, and configurations necessary for running an application. Real-World Example # If you were to install Jenkins on Linux using the traditional method:\n$ sudo apt-get install jenkins Running this command requires downloading multiple dependency packages together.\nHowever, using Docker:\n$ docker pull jenkins/jenkins:lts You can download a pre-configured image containing all necessary components at once.\nüì¶ Docker Registry \u0026amp; Docker Hub # Docker Registry serves as a repository for sharing Docker images. Think of it as \u0026ldquo;GitHub for Docker.\u0026rdquo; Docker Hub is the official Docker registry, providing official images from vendors.\nWorkflow # Users download images from the registry Run images as containers Configure multiple isolated environments on a single computer üîÑ Container Virtualization # Container technology is \u0026ldquo;a server virtualization method that enables running multiple isolated instances within a single system,\u0026rdquo; where each container appears as an individual server to users. Important Note: Containers are not exclusive to Docker. Various container technologies exist, including OpenVZ, Libvirt, and LXC.\nüñ•Ô∏è Types of Virtualization # 1. Host Virtualization # Structure: Guest OS runs on top of Host OS through virtualization software.\nExamples: VM Workstation, VMware Player, VirtualBox, etc. Advantages:\nSimple installation and configuration Minimal host requirements through hardware emulation Disadvantages:\nResource-intensive due to running OS on top of OS Significant performance overhead 2. Hypervisor Virtualization # Structure: Software is installed and runs directly on hardware without a Host OS.\nTwo Approaches to Hypervisor Virtualization:\n1) Full Virtualization # Guest OS accesses hardware through the hypervisor, not directly More stable but has performance overhead 2) Paravirtualization # Guest OS directly accesses hardware through the hypervisor Faster but requires OS modifications Advantages:\nMore efficient without Host OS Better resource utilization Disadvantages:\nSlow startup time Still consumes significant resources as each VM runs an independent OS 3. Container Virtualization ‚≠ê # Structure: Applications share the host OS kernel while maintaining isolated environments.\nAdvantages:\nLightweight: Typically tens of MB (VMs are tens of GB) Fast startup: No need to boot a separate OS Low resource usage: Efficient utilization of system resources High density: Run more containers on the same hardware Disadvantages:\nRequires the same OS environment as the host system Cross-platform deployment can be challenging (e.g., Linux containers require Linux host) üìä Virtualization Comparison # Category Host Virtualization Hypervisor Virtualization Container Virtualization Size Tens of GB Tens of GB Tens of MB Startup Speed Slow Slow Very Fast Resource Usage High Medium Low Isolation Level High High Medium Portability Low Medium High Setup Difficulty Easy Hard Medium üí° Summary # Core Value of Docker Container Virtualization:\nEfficiency: Provides the same functionality with far fewer resources than traditional virtualization Speed: Start and stop applications in seconds Consistency: Runs identically across development, testing, and production environments Scalability: Easy to add or remove containers as needed Docker is a core tool for modern application development and deployment, serving as the foundation for DevOps and microservices architecture.\n","date":"2022-10-24","externalUrl":null,"permalink":"/en/posts/about_docker/","section":"Posts","summary":"Docker is an open-source platform that packages applications into containers, enabling them to run reliably across different environments. We\u0026rsquo;ll compare the differences and pros/cons of host virtualization, hypervisor virtualization, and container virtualization, and explore the efficiency and usage of Docker containers.","title":"What is Docker? Docker Container and Types of Virtualization","type":"posts"},{"content":"","date":"2022-10-24","externalUrl":null,"permalink":"/tags/%EA%B0%80%EC%83%81%ED%99%94/","section":"Tags","summary":"","title":"Í∞ÄÏÉÅÌôî","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/series/deep-dive-into-network/","section":"Series","summary":"","title":"Deep Dive Into Network","type":"series"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/dhcp/","section":"Tags","summary":"","title":"DHCP","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/ip/","section":"Tags","summary":"","title":"IP","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/ipv4/","section":"Tags","summary":"","title":"IPv4","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/nat/","section":"Tags","summary":"","title":"NAT","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/categories/network/","section":"Categories","summary":"","title":"Network","type":"categories"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/network/","section":"Tags","summary":"","title":"Network","type":"tags"},{"content":" Private networks and public networks - I\u0026rsquo;ve heard these terms somewhere, but I wanted to organize these concepts since I didn\u0026rsquo;t fully understand them. The relationship between private and public IPs You might be confused when you first see the diagram above, but after reading the entire article, you\u0026rsquo;ll be able to understand it with an \u0026ldquo;Aha!\u0026rdquo; moment. üìÖ 2011, IPv4 Address Exhaustion Declared # The Internet Assigned Numbers Authority (IANA), which manages internet addresses, declared that there would be no more IPv4 allocations. While IPv4 can use approximately 4.3 billion limited addresses, the rapid increase in internet demand exhausted the IPv4 addresses allocated to each continent.\nIANA (Internet Assigned Numbers Authority) is an organization that manages IP addresses, top-level domains, etc. It is currently managed by ICANN. But How Are We Still Using IPv4? # So here we are in 2022, 11 years after IPv4 ran out, and we\u0026rsquo;re still using IPv4 just fine. How is this possible?\nIPv6 was developed long ago and is gradually being commercialized. Nevertheless, IPv4 usage is still much more prevalent, so how has it been maintained well until now, 11 years later?\nThis is thanks to Private Networks. üîå What is a Private Network? # A private network refers to a network that uses a specific range of IPv4 addresses within limited spaces such as homes and businesses, rather than on the public internet. Private IP ranges that belong to private networks can only be used within the private network (internal network), so they cannot be used on the public network (external network, internet).\nPrivate IP ranges What is a Public IP? # A public IP is necessary for different PCs to communicate with each other over the internet and is used for purposes such as:\nBuilding website servers PC internet connection Communication via the internet Each country has an organization that manages public IPs. In Korea, the Korea Internet \u0026amp; Security Agency (KISA) manages them. Public IP address system üí° Concept Summary # Private networks can only be used within limited spaces such as homes or businesses. So how do we communicate with other PCs that don\u0026rsquo;t use the same private network as us?\nWe need a public IP!\nIn other words, special measures are needed to communicate with the public internet from a private network. Private IPs are regulated to be used only within private networks, so private IPs cannot be used on the public internet.\nüîÑ NAT (Network Address Translation) # To address this, Network Address Translation (NAT) was devised as a method to convert IP addresses.\nWhat is NAT?\nIt refers to a technology that sends and receives network traffic through a router while rewriting TCP/UDP port numbers and source and destination IP addresses of IP packets. Since changes occur in packets, IP and TCP/UDP checksums must also be recalculated and rewritten.\nThe reason for using NAT is usually to allow multiple hosts belonging to a private network to access the internet using a single public IP address.\nIn other words, it means converting to the IP used in the public/private network when communicating from a private network to a public network and vice versa. According to the above explanation, converting TCP/UDP port numbers of IP packets is actually because NAT includes not only IP addresses but also port conversion!\nIt\u0026rsquo;s called PAT or NAPT (Port Address Translation).\nüì° Router Functions # These days, most homes have routers installed and in use (e.g., iptime, olleh, etc.).\nThese routers have various functions.\n1. DHCP Server Function # First, there\u0026rsquo;s a DHCP (Dynamic Host Configuration Protocol) server function that assigns IPs to various devices connected through a single router.\nDynamic Host Configuration Protocol (DHCP)\nDHCP is an IP standard that simplifies host IP configuration management. It provides a method to dynamically assign IP addresses and other related configuration details to DHCP-enabled clients on the network using a DHCP server.\nThrough this, smart devices and PCs inside the house connected to the router are each assigned a private IP.\nWhy are they assigned private IPs?\nIf you go back to the very first explanation, you\u0026rsquo;ll understand\u0026hellip;?!\nSince the number of IP allocations is limited, we can\u0026rsquo;t assign a public IP to every home, or rather, every device, so we assign private IPs to build a private network! By building a private network this way, communication is possible internally, but we still can\u0026rsquo;t communicate with the external internet.\n2. NAT Function # That\u0026rsquo;s why routers have a NAT function.\nFunction to convert private IPs to public IPs Build their own mapping table and manage pre-conversion and post-conversion values with a NAT table Of course, the router doesn\u0026rsquo;t have its own public IP! The router uses the public IP range provided by internet service providers (KT, SKT, LG, etc.)! What is a VPN (Virtual Private Network)? # Going further, let\u0026rsquo;s learn about VPNs, which we may have used but don\u0026rsquo;t know exactly what role they play!\nVPN stands for Virtual Private Network, which, as the name suggests, is a private network but a virtual one. The VPN I knew was something that changes IPs or fakes IPs for illegal purposes\u0026hellip; ü§î\nI thought it was something like that, but it\u0026rsquo;s half right and half wrong!\nThe True Meaning of VPN # VPN refers to being able to use an external computer as if it were connected to an internal network (private network).\nThe reason why the IP changes when using VPN can also be understood if you think carefully about private/public networks mentioned above.\nThe IP changes because you\u0026rsquo;ve connected to the internal network (private network) through VPN! üíº VPN Use Cases # 1. Remote Work/Telecommuting # Through this, companies with private networks set up VPN servers, and through external public IP addresses and configured IDs/passwords, you can access the company\u0026rsquo;s private network from anywhere.\n2. Remote Computer Access # Similarly, for personal computers, through VPN setup, if you know the external public IP address, you can access your computer in Seoul from Jeju Island through VPN from anywhere.\n3. Bypassing Geographical Restrictions # When a website in a certain country blocks access from our country\u0026rsquo;s IP, we cannot access that site. To access this site, we need to approach with an IP address from a country other than ours. At this time, through VPN, we can bypass the blocked firewall as if we\u0026rsquo;re accessing from an internal network in another country.\n4. Firewall Bypass Mechanism # Hypothetical Scenario\nIf a company blocks access to SNS during work hours as an internal policy, we connect through VPN set up at home or an overseas VPN. Then we can access SNS.\nWhy does this work?\nThe moment you connect to VPN, a virtual tunnel is formed, and packets sent for communication between tunnels are broken down into smaller pieces and undergo encryption and encapsulation. At this time, although it passes through the company\u0026rsquo;s firewall, because it\u0026rsquo;s an encrypted/encapsulated packet, the firewall cannot detect that you\u0026rsquo;re trying to access SNS through VPN, so it lets the packet pass through.\nVPN tunneling structure üìã VPN Summary # üëç Advantages # Data security üîí Online privacy protection üìç IP address change üõ°Ô∏è Personal protection üöÄ Bandwidth throttling prevention üëé Disadvantages # While VPN has many advantages as mentioned above, it also has disadvantages.\nüê¢ Devices connected to VPN must communicate with the VPN server using encryption, so network speed is very slow ‚ö†Ô∏è Some VPNs with low reliability exist üí∞ You must pay to use VPNs with high security üö´ Not available in some countries ","date":"2022-10-05","externalUrl":null,"permalink":"/en/posts/about_ip/","section":"Posts","summary":"Learn the differences between private and public IPs, the role of NAT (Network Address Translation), and how VPNs work. From the concept of private networks that solved IPv4 address exhaustion to NAT functions in routers and practical VPN use cases, we\u0026rsquo;ll explore the core concepts of networking.","title":"Private IP/Public IP? Private Network/Public Network? VPN?","type":"posts"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/private-network/","section":"Tags","summary":"","title":"Private Network","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/public-network/","section":"Tags","summary":"","title":"Public Network","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/en/tags/vpn/","section":"Tags","summary":"","title":"VPN","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/tags/%EA%B3%B5%EC%9D%B8%EB%A7%9D/","section":"Tags","summary":"","title":"Í≥µÏù∏Îßù","type":"tags"},{"content":"","date":"2022-10-05","externalUrl":null,"permalink":"/tags/%EC%82%AC%EC%84%A4%EB%A7%9D/","section":"Tags","summary":"","title":"ÏÇ¨ÏÑ§Îßù","type":"tags"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/series/deep-dive-into-springboot/","section":"Series","summary":"","title":"Deep Dive Into SpringBoot","type":"series"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/tags/dispatcher-servlet/","section":"Tags","summary":"","title":"Dispatcher Servlet","type":"tags"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/tags/servlet/","section":"Tags","summary":"","title":"Servlet","type":"tags"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/categories/spring/","section":"Categories","summary":"","title":"Spring","type":"categories"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/tags/spring/","section":"Tags","summary":"","title":"Spring","type":"tags"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/tags/spring-mvc/","section":"Tags","summary":"","title":"Spring MVC","type":"tags"},{"content":" What is Dispatcher Servlet? # The term dispatch in Dispatcher Servlet means \u0026ldquo;to send\u0026rdquo;. The Dispatcher Servlet can be defined as a Front Controller that receives all incoming HTTP protocol requests first and delegates them to the appropriate controller.\nOperation Overview # The more detailed process is as follows:\nWhen a request comes from the client, a servlet container such as Tomcat receives the request All these requests are received first by the Dispatcher Servlet, which is the Front Controller The Dispatcher Servlet processes common tasks first and then finds the controller that should handle the request and delegates the work Front Controller Pattern # The term Front Controller refers to a controller that receives and processes all client requests coming to the server at the front of the servlet container, and it is a design pattern used together with the MVC architecture.\nHow Dispatcher Servlet Works # The Dispatcher Servlet is the Front-Controller that receives requests first.\nIt passes through filters in the Servlet Context (Web Context) The Dispatcher Servlet receives the request first in the Spring Context The Dispatcher Servlet must find the appropriate controller and method to delegate the request, and the operation process is as follows.\nDetailed Operation Process # 1. HTTP Request passes through Filter and is received by Dispatcher Servlet # 2. Check request information and find the Controller to delegate # RequestMappingHandlerMapping, one of the implementations of HandlerMapping, parses all controller beans written with @Controller and manages (request information, processing target) as a HashMap.\nIt finds the HandlerMethod object that contains the controller and method mapped to the request. Therefore, when a request comes in, HandlerMapping creates a Key object (request information) using HTTP Method, URI, etc., finds the HandlerMethod to process the request as Value, wraps it in HandlerMethodExecutionChain, and returns it.\nThe reason for this wrapping is to include interceptors that need to be processed before passing the request to the controller.\n3. Find and pass the HandlerAdapter to delegate to the Controller # The Dispatcher Servlet does not delegate requests directly to the controller, but delegates them through HandlerAdapter.\nThe reason for going through the HandlerAdapter interface is that there are various ways to implement controllers. While controller classes are mainly written using @Controller with @RequestMapping related annotations, controller classes can also be written by implementing the Controller interface.\nTherefore, Spring applies the adapter pattern through the HandlerAdapter interface, allowing requests to be delegated to Controllers regardless of the controller implementation method.\n4. HandlerAdapter delegates the request to the Controller # Common pre/post processing is required before HandlerAdapter passes the request to the Controller.\nTypically:\nInterceptor processing ArgumentResolver to handle @RequestParam, @RequestBody, etc. in requests ReturnValueHandler that handles processing such as serializing the Body of ResponseEntity to JSON in responses These processes are handled before being passed from the adapter to the controller. Then it delegates the request to invoke the controller\u0026rsquo;s method.\n5. Process Business Logic # The Controller calls the service and proceeds with business logic.\n6. Controller returns the return value # Returns ResponseEntity or View name.\n7. HandlerAdapter processes the return value # HandlerAdapter returns the response received from the controller to the Dispatcher Servlet after post-processing by the ReturnValueHandler, the response processor.\nIf the controller returns ResponseEntity ‚Üí HttpEntityMethodProcessor uses MessageConverter to serialize the response object and set the response status (HttpStatus) If View name is returned ‚Üí View is returned through ViewResolver 8. Send the server\u0026rsquo;s response to the client # The response returned through DispatcherServlet passes through the Filter again and is returned to the client.\n","date":"2022-09-27","externalUrl":null,"permalink":"/en/posts/dispatcher/","section":"Posts","summary":"Explains the Front Controller pattern and the complete request processing flow of how Dispatcher Servlet receives client requests and delegates them to appropriate controllers","title":"Understanding Spring Dispatcher Servlet","type":"posts"},{"content":"","date":"2022-09-27","externalUrl":null,"permalink":"/en/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/class-loader/","section":"Tags","summary":"","title":"Class Loader","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/series/deep-dive-into-jvm/","section":"Series","summary":"","title":"Deep Dive Into JVM","type":"series"},{"content":" JVM Components # 1. Class Loader # JVM\u0026rsquo;s Class Loader loads *.class files (bytecode files converted by javac) into Runtime Data Areas to run the program.\nClass Loader loading occurs at runtime, when a class is first accessed. This enables Lazy Loading Singleton implementation.\nClass Loading is Thread-safe. 2. Execution Engine # Executes the bytecode loaded into Runtime Data Areas by the Class Loader. It converts bytecode to machine code and executes it instruction by instruction, composed of 1-byte OpCode and operands.\nKey Components # Interpreter Compiler (Just-in-Time) 3. Garbage Collector # Responsible for removing unreferenced objects in the Heap area.\nBefore Java, programmers managed all program memory. In Java, the JVM manages program memory through a process called garbage collection.\nGarbage collection continuously finds and removes unused memory in Java programs. 4. Runtime Data Areas # JVM\u0026rsquo;s memory area allocated from the OS. It holds data needed to run Java applications.\nRuntime Data Areas are divided into 5 areas as follows.\nShared Areas\nMethod and Heap areas are shared by all Threads Thread-specific Areas\nStack, PC Register, Native Method areas exist per Thread (1) Method Area # Created when the JVM starts, it stores runtime constant pools, field and method code, static variables, method bytecode, etc. for each class and interface read by the JVM.\nIt\u0026rsquo;s a Non-Heap area stored in the Permanent area. This is a factor to consider when specifying the PermSize (Permanent Generation size) JVM option. 1-1 Type Information # Whether it\u0026rsquo;s an Interface Type name including package name Type access modifiers Associated Interface list 1-2 Runtime Constant Pool # Stores all references to Type, Field, and Method JVM finds and references memory addresses through the Runtime Constant Pool 1-3 Field Information # Field type Field access modifiers 1-4 Method Information # Stores metadata for all Methods including Constructors Stores Method name, parameter count and type, return type, access modifiers, bytecode, local variable section size, etc. 1-5 Class Variable # Stores variables declared with the static keyword Actual instances of non-primitive static variables are stored in Heap memory (2) Heap Area # Space for storing objects created with the new operator.\nObjects become targets for GC (Garbage Collector) when no referencing variables or fields exist. (3) Stack Area # Stored as separate Frames per Thread, with the following elements stored.\n3-1 Local Variable Area # Stores temporary data occurring during Method execution, such as local variables, parameters, and method call addresses Stored in 4-byte units: 4-byte primitives like int, float occupy 1 cell; 8-byte primitives like double occupy 2 cells bool generally occupies 1 cell 3-2 Operand Stack # The Method\u0026rsquo;s workspace Indicates which commands to execute with which operands 3-3 Frame Data # Includes Constant Pool Resolution, Method Return, Exception Dispatch, etc. Also holds referenced Exception tables When an Exception occurs, JVM references this table to determine how to handle the Exception (4) PC Register # Created when a Thread starts, one exists per thread.\nHolds the address of the currently executing portion of the Thread, recording which part should be executed with which instruction.\nThe OS references the PC (Program Counter) Register to know which instruction the Thread should execute next during CPU scheduling. (5) Native Method Stack # Area for executing programs written in actual executable machine code rather than bytecode generated from Java program compilation.\nSpace for code written in languages other than Java Converted to bytecode and stored through the Java Native Interface Area where the kernel grabs the stack and independently executes the program, like a general program JVM Execution Order # Memory Allocation\nWhen a program runs, JVM receives memory needed to execute the program from the OS JVM divides this memory into multiple areas for use Compilation\nJava Compiler (javac) compiles *.java files and converts them to *.class Java bytecode Class Loading\nCompiled *.class files are loaded into JVM memory through the Class Loader Bytecode Interpretation\nLoaded *.class files are interpreted into machine code through the Execution Engine Execution and Management\nInterpreted bytecode is placed in memory areas and actually executed During execution, JVM performs memory management tasks such as thread synchronization and garbage collector as needed ","date":"2022-09-23","externalUrl":null,"permalink":"/en/posts/jvm_2/","section":"Posts","summary":"An in-depth analysis of JVM\u0026rsquo;s 4 core components and the 5 memory areas of Runtime Data Areas (Method, Heap, Stack, PC Register, Native Method Stack).","title":"Deep Dive into JVM (Java Virtual Machine) (2)","type":"posts"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/garbage-collector/","section":"Tags","summary":"","title":"Garbage Collector","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/categories/java/","section":"Categories","summary":"","title":"Java","type":"categories"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/jvm/","section":"Tags","summary":"","title":"JVM","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/memory-management/","section":"Tags","summary":"","title":"Memory Management","type":"tags"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/categories/programming/","section":"Categories","summary":"","title":"Programming","type":"categories"},{"content":"","date":"2022-09-23","externalUrl":null,"permalink":"/en/tags/runtime-data-areas/","section":"Tags","summary":"","title":"Runtime Data Areas","type":"tags"},{"content":"While studying the Java language, I became curious about the JVM. I only knew it as a virtual computer that executes the code I write, so I wanted to dig deeper into how it works and what role it plays.\nWhat is JVM? # An abbreviation for Java Virtual Machine, it refers to a virtual computer environment for running Java.\nSo what role does JVM play? # Java is not OS-dependent.\nTo meet this condition and execute the code we write, something is needed between Java and the OS.\nThat\u0026rsquo;s the JVM.\nCode Execution Process # Source code (raw code) *.java must be converted to machine code (010101000101\u0026hellip;) for the CPU to recognize it.\nSo does *.java get directly converted to machine code and executed\u0026hellip;? # No. The *.java file is first converted to java bytecode (*.class) so that the JVM can recognize it.\nThis conversion process is performed by the java compiler.\nThe java compiler is javac.exe located in the bin folder when you install JDK.\nYou can generate .class files using the javac command You can execute these .class files using the java command So now it runs on the OS..? # No\u0026hellip;. bytecode is not machine code, so it doesn\u0026rsquo;t run directly on the OS\u0026hellip;! At this point, the JVM plays the role of interpreting this bytecode so the OS can understand it.\nThanks to this role of the JVM, Java code written once can be executed regardless of the OS.\nOverall Process # *.java ‚Üí converted to bytecode form *.class ‚Üí converted to machine code (binary code) through JIT (Just In Time) compiler\nWhat is JIT (Just In Time) Compiler? # Also called JIT compilation or dynamic translation.\nJIT was introduced to complement the shortcomings of the interpreter approach.\nIt translates to machine code at the actual execution time of the program.\nPerformance Characteristics # Since machine code is stored in cache, code that has been compiled once executes quickly. The process of JIT compiler compiling to machine code is much slower than interpreting bytecode, but once executed, it\u0026rsquo;s fast afterwards However, for code that runs only once, it\u0026rsquo;s advantageous to interpret directly without compiling JVM using JIT compiler checks how often a method is executed and only compiles when it exceeds a certain threshold.\nWhat is the Interpreter Approach? # An interpreter translates source code line by line to machine code at each execution, so execution speed is slower than statically compiled languages.\nRepresentative Interpreter Languages # Python JavaScript Database language SQL Advantages and Disadvantages # Category Description Advantages Simple program modification Disadvantages Execution speed is slower than compiled languages Compilers translate source code to create executable files, so when program modifications occur, the source code must be recompiled.\nIf the program is small and simple, there\u0026rsquo;s no problem, but as the program grows larger, compilation often takes hours.\nHowever, with an interpreter, you just modify the source code and run it, so it\u0026rsquo;s widely used in programming where modifications occur frequently.\n","date":"2022-09-22","externalUrl":null,"permalink":"/en/posts/jvm_1/","section":"Posts","summary":"A deep dive into the core concepts and operating principles of the Java Virtual Machine. Understand the complete process of how source code is converted to bytecode and executed as machine code through the JIT compiler.","title":"Deep Dive into JVM (Java Virtual Machine) (1)","type":"posts"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/en/tags/oop/","section":"Tags","summary":"","title":"OOP","type":"tags"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/en/tags/procedural-programming/","section":"Tags","summary":"","title":"Procedural Programming","type":"tags"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/en/series/programming-basics/","section":"Series","summary":"","title":"Programming Basics","type":"series"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/en/tags/programming-paradigm/","section":"Tags","summary":"","title":"Programming Paradigm","type":"tags"},{"content":" Object-Oriented Programming (OOP) vs Procedural Programming (PP) # Object-oriented languages and procedural languages are not opposing concepts. So what exactly are object-oriented and procedural languages?\nWe typically refer to languages like Java, Python, and C# as object-oriented languages, while C is called a procedural language. However, this merely indicates what these languages orient toward - it doesn\u0026rsquo;t mean C can only do procedural programming or that Java and Python can only do object-oriented programming.\nRegardless of which language you use, you can write procedural code. Conversely, you can write object-oriented code even in C.\nThe Misconception of \u0026ldquo;Procedural-Oriented\u0026rdquo; # In fact, calling something a procedural-oriented language is incorrect. All programming languages are based on procedures, so saying they \u0026ldquo;orient toward\u0026rdquo; procedures doesn\u0026rsquo;t make sense.\nTo use an analogy:\nIt\u0026rsquo;s like saying weightlifting is a sport that orients toward barbells, when in reality it\u0026rsquo;s a sport based on using barbells. Should we do weightlifting with dumbbells instead\u0026hellip;? In other words, the correct term is \u0026lsquo;Procedural Programming\u0026rsquo;, not \u0026lsquo;Procedural-Oriented\u0026rsquo;.\nObject-Oriented Programming (OOP) and Procedural Programming (PP) simply represent different approaches to programming - they are not opposing concepts! Key Differences # Procedural Programming: Creates functions centered around data Object-Oriented Programming: Bundles data and functions (behaviors) together into objects Criteria for Distinguishing Procedural and Object-Oriented Languages # There are various ways to distinguish them, but broadly speaking, they can be categorized as follows:\nDoes it support encapsulation, polymorphism, and class inheritance? Can it restrict data access? Generally, languages that satisfy these criteria are considered to have stronger object-oriented characteristics.\nProcedural Programming # Procedural programming literally means structuring code procedurally.\nIt\u0026rsquo;s an approach where you identify the sequence of data operations and create functions for necessary features, executing them procedurally (in order).\nObject-Oriented Programming # Object-oriented programming bundles functionalities into objects.\nIn other words, you create individual objects, each bundling the behaviors (functions) and data they can handle.\nExample # Imagine implementing a ride-hailing service:\nCar Object: Bundles all the behaviors (functions) a car can perform Driver Object: Bundles all the behaviors a driver can perform Passenger Object: Bundles all the behaviors a passenger can perform The algorithm is constructed through interactions between these objects by calling their methods and fields.\nSo Which Approach is Better? # There\u0026rsquo;s no definitive answer. Use what fits your needs and your preferred style. Programming in the Past # In the past, we didn\u0026rsquo;t need hardware and software on the scale we do today. Old languages like C, Fortran, and COBOL - representative procedural languages - were widely used.\nModern Programming # As we entered the modern era, software development accelerated and code became increasingly complex.\nThis led to tangled algorithms, and code became difficult or impossible for humans to understand - resulting in spaghetti code.\nObject-oriented programming emerged as an alternative to address these issues.\nWhy is Object-Oriented Programming Dominant? # Currently, object-oriented programming is predominantly used. The reasons are:\nFor complex programs, using procedural programming makes code more prone to tangling In terms of scalability, it offers fewer advantages for maintenance Pros and Cons of Procedural Programming # Pros # Program directly without creating objects or classes Create functions for needed features to call and reuse instead of copy-pasting Easy to trace program flow Cons # Difficult to modify due to tight coupling between code sections (high cohesion makes additions and modifications difficult) Difficult to debug (error checking) Pros and Cons of Object-Oriented Programming # Pros # Easier maintenance through modularization and encapsulation Code is easier to understand due to similarity with the real world Objects themselves are self-contained programs that can be reused in other programs Cons # Most object-oriented programs tend to be relatively slower and use more memory Requires significant time in the design phase to make code understandable through real-world analogies There\u0026rsquo;s No Right Answer! Use the Right Tool for the Job # When to Use Procedural Programming # Typically used when the project scope is small and there\u0026rsquo;s little need for code reuse.\nBenefits:\nThe program itself is lighter Requires less development time and personnel compared to object-oriented approach When to Use Object-Oriented Programming # For large-scale projects where code needs to be reused, object-oriented programming is suitable (excluding initial development costs).\nBenefits:\nMore stable from a maintenance perspective Conclusion # Today we explored object-oriented programming and procedural programming. While I don\u0026rsquo;t yet have deep knowledge of these topics, by researching various sources, I\u0026rsquo;ve gained a broad understanding of object-oriented and procedural programming. Next time, I\u0026rsquo;ll dive deeper into these concepts! ","date":"2022-08-31","externalUrl":null,"permalink":"/en/posts/about_oop/","section":"Posts","summary":"Learn about the concepts, differences, and advantages/disadvantages of Object-Oriented Programming and Procedural Programming, and understand when to use each approach.","title":"Understanding Object-Oriented and Procedural Programming","type":"posts"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/tags/%EC%A0%88%EC%B0%A8%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/","section":"Tags","summary":"","title":"Ï†àÏ∞®Ï†Å ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç","type":"tags"},{"content":"","date":"2022-08-31","externalUrl":null,"permalink":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84/","section":"Tags","summary":"","title":"ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ìå®Îü¨Îã§ÏûÑ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"}]