<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on 0AndWild_log</title><link>https://0AndWild.github.io/categories/programming/</link><description>Recent content in Programming on 0AndWild_log</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><copyright>© 2025 gunyoung.Park</copyright><lastBuildDate>Fri, 23 Sep 2022 22:27:28 +0900</lastBuildDate><atom:link href="https://0AndWild.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM(JavaVirtualMachine) 파헤치기 (2)</title><link>https://0AndWild.github.io/posts/jvm_2/</link><pubDate>Fri, 23 Sep 2022 22:27:28 +0900</pubDate><guid>https://0AndWild.github.io/posts/jvm_2/</guid><description>JVM의 4가지 핵심 구성요소와 Runtime Data Areas의 5가지 메모리 영역(Method, Heap, Stack, PC Register, Native Method Stack)을 깊이 있게 분석합니다.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://0AndWild.github.io/posts/jvm_2/featured.png"/></item><item><title>JVM(JavaVirtualMachine) 파헤치기 (1)</title><link>https://0AndWild.github.io/posts/jvm_1/</link><pubDate>Thu, 22 Sep 2022 22:06:50 +0900</pubDate><guid>https://0AndWild.github.io/posts/jvm_1/</guid><description>Java Virtual Machine의 핵심 개념과 동작 원리를 파헤칩니다. 소스코드가 바이트코드로 변환되고 JIT 컴파일러를 통해 기계어로 실행되는 전체 과정을 이해해봅니다.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://0AndWild.github.io/posts/jvm_1/featured.png"/></item><item><title>객체지향 프로그래밍과 절차적 프로그래밍에 대해 알아보자</title><link>https://0AndWild.github.io/posts/about_oop/</link><pubDate>Wed, 31 Aug 2022 20:02:58 +0900</pubDate><guid>https://0AndWild.github.io/posts/about_oop/</guid><description>객체지향 프로그래밍과 절차적 프로그래밍의 개념, 차이점, 장단점을 알아보고 언제 어떤 방식을 사용해야 하는지 정리합니다.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://0AndWild.github.io/posts/about_oop/featured.png"/></item></channel></rss>